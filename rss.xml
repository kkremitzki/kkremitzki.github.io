<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Biosystems Engineering Blog</title><link>https://kkrem.it/zki/</link><description>Notes on my journey in biosystems engineering.</description><atom:link href="/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 06 May 2017 08:17:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>My FreeCAD project was accepted into Google Summer of Code!</title><link>/blog/my-freecad-project-was-accepted-into-google-summer-of-code/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;p&gt;It's been almost a year since my last post, which just so happened to be about FreeCAD
as well. It's been a busy year: I've been studying machine design, robotics; partial differential
equations in general, and heat and mass transfer in particular. I've also been studying the source
code of FreeCAD. It has a great deal of potential application in things like unit operations and the
analysis of networks. For example, an irrigation network could be modeled geometrically and analyzed
for important overall properties of the system like the uniformity coefficient, which is a measure of
how pressure losses in the network and elevation changes affect how extreme a difference exists between
the relatively "wettest" and "driest" outputs. I did some early modeling of this using Python in&lt;/p&gt;</description><category>freecad</category><guid>/blog/my-freecad-project-was-accepted-into-google-summer-of-code/</guid><pubDate>Sat, 06 May 2017 07:41:23 GMT</pubDate></item><item><title>Getting Started with FreeCAD Development in Ubuntu 16.04</title><link>/blog/getting-started-with-freecad-development-in-ubuntu-1604/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.freecadweb.org/"&gt;FreeCAD&lt;/a&gt; is a multi-platform (Windows, Mac, Linux) open source parametric 3D CAD modeler, and can read
and write many open file formats.&lt;/p&gt;
&lt;p&gt;An explanation of the many virtues of open source software can be found at &lt;a class="reference external" href="http://opensourceforamerica.org/learn-more/benefits-of-open-source-software/"&gt;Open Source for America&lt;/a&gt; and elsewhere. To quote OSFA,&lt;/p&gt;
&lt;blockquote&gt;
The Open Source model harnesses the power of distributed peer review and transparency to create high-quality, secure
and easily integrated software at an accelerated pace and lower cost.&lt;/blockquote&gt;
&lt;p&gt;Commerical-grade CAD software, while incredibly useful, has several downsides including being locked behind 4 or 5 digit licensing costs,
and its use in amateur projects or the developing world is often facilitated by piracy. FreeCAD, on the other hand, is free as in beer
and free as in freedom, although it is currently under development. However, one of the benefits of the open source model is the ease
with which interested people can contribute to the project and make better tools for all mankind.&lt;/p&gt;
&lt;p&gt;While using FreeCAD, I noticed a few typos in the menus; although my first contribution to the project wasn't too significant, I
documented the process of getting a development environment set up on my Ubuntu 16.04 desktop so that others could follow the same
steps and begin contributing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pull down a copy of the code. (If you don't have a copy of git, run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install git&lt;/tt&gt;.)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_514385addd6e4fbdb0d6773c39bf7adb-1"&gt;&lt;/a&gt;git clone https://github.com/FreeCAD/FreeCAD.git freecad-code
&lt;a name="rest_code_514385addd6e4fbdb0d6773c39bf7adb-2"&gt;&lt;/a&gt;mkdir freecad-build
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Install all dependencies.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-1"&gt;&lt;/a&gt;sudo apt-get install build-essential cmake python python-matplotlib libtool libcoin80-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-2"&gt;&lt;/a&gt;  libsoqt4-dev libxerces-c-dev libboost-dev libboost-filesystem-dev libboost-regex-dev  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-3"&gt;&lt;/a&gt;  libboost-program-options-dev libboost-signals-dev libboost-thread-dev libboost-python-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-4"&gt;&lt;/a&gt;  libqt4-dev libqt4-opengl-dev qt4-dev-tools python-dev python-pyside pyside-tools &lt;span class="s1"&gt;'liboce*-dev'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-5"&gt;&lt;/a&gt;  oce-draw libeigen3-dev libqtwebkit-dev libshiboken-dev libpyside-dev libode-dev swig libzipios++-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-6"&gt;&lt;/a&gt;  libfreetype6 libfreetype6-dev
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Install optional packages&lt;/span&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-9"&gt;&lt;/a&gt;sudo apt-get install libsimage-dev checkinstall python-pivy python-qt4 doxygen &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_310a731424504cf1aa0f4f17c9c8613e-10"&gt;&lt;/a&gt;  libcoin80-doc libspnav-dev
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Move into build folder, make and compile the software. Use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-j&lt;/span&gt; $(nproc)&lt;/tt&gt; flag to use all N of your CPU cores
when compiling; some recommend using N + 1 CPU cores, which can be done by instead running &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;-j$((&lt;/span&gt; $(nproc) + 1 )) .&lt;/tt&gt;.
Don't forget the period at the end of the &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; command, which tells it to put the compiled software in the current
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;freecad-build&lt;/span&gt;&lt;/tt&gt; directory; it's good to keep the source code and build directories separate.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_dc9de28358484e4b8acce701b40472c8-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; freecad-build
&lt;a name="rest_code_dc9de28358484e4b8acce701b40472c8-2"&gt;&lt;/a&gt;cmake ../freecad-code
&lt;a name="rest_code_dc9de28358484e4b8acce701b40472c8-3"&gt;&lt;/a&gt;make -j&lt;span class="k"&gt;$(&lt;/span&gt;nproc&lt;span class="k"&gt;)&lt;/span&gt; .
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Fix Ubuntu 64-bit issue. If you are using a 64-bit version of Ubuntu (hopefully), you may run in to the following
error message, which occurs because the expected &lt;tt class="docutils literal"&gt;libfreeimage.so&lt;/tt&gt; file was moved into a subdirectory of &lt;tt class="docutils literal"&gt;/usr/lib/&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c3becef32c8047c7a213aeb093fe04db-1"&gt;&lt;/a&gt;make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** No rule to make target &lt;span class="s1"&gt;'/usr/lib/libfreeimage.so'&lt;/span&gt;, needed by &lt;span class="s1"&gt;'lib/libSMDS.so'&lt;/span&gt;.  Stop.
&lt;a name="rest_code_c3becef32c8047c7a213aeb093fe04db-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_c3becef32c8047c7a213aeb093fe04db-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Fix with this line.&lt;/span&gt;
&lt;a name="rest_code_c3becef32c8047c7a213aeb093fe04db-4"&gt;&lt;/a&gt;sudo ln -s /usr/lib/x86_64-linux-gnu/libfreeimage.so /usr/lib
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Once the build is complete, a runnable copy of the FreeCAD executable will be in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;freecad-build&lt;/span&gt;&lt;/tt&gt; folder. Any changes
made to the source code can be tested after re-compiling the executable.&lt;/p&gt;
&lt;p&gt;Hopefully this post helps someone out there! Even if you are only contributing to the documentation as you learn FreeCAD,
your contribution is valuable and can help tons of people across the globe.&lt;/p&gt;&lt;/div&gt;</description><category>cad</category><category>foss</category><category>linux</category><guid>/blog/getting-started-with-freecad-development-in-ubuntu-1604/</guid><pubDate>Sun, 05 Jun 2016 11:17:51 GMT</pubDate></item><item><title>French Lessons</title><link>/blog/french-lessons/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;Part of my summer is going to be spent studying mathematics in France, but international study is not complete without a foray into the language.
I've always been very interested in linguistics, and one of my long-term goals is to be a polyglot (which first means turning my 4 years of German and 2 years of Chinese into actual mastery), so I was pretty excited when I found my professor
had arranged thrice weekly morning lessons here at the CLA (Centre de Linguistique Appliquée) Besançon. Our lessons are complete immersion style;
the teacher speaks only French, which was quite difficult at first. The only "experience" I have with the language comes from my exposure to Spanish
this spring when I visited Mérida, Yucatán to work on a community garden irrigation project; other than the occasional Spanish or English cognate,
I'm completely in the dark. Luckily, everyone in town is very helpful and accommodating.&lt;/p&gt;
&lt;img alt="/images/cla.jpg" class="align-center" src="/images/cla.jpg" style="width: 638px;"&gt;&lt;/div&gt;</description><guid>/blog/french-lessons/</guid><pubDate>Fri, 27 May 2016 17:20:29 GMT</pubDate></item><item><title>Linux Console Caps/Escape Swap</title><link>/blog/linux-console-capsescape-swap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;Full-fledged Linux desktop environments like GNOME or Ubuntu's Unity often have built-in keyboard mapping tools to meet user needs.
At a lower level, &lt;tt class="docutils literal"&gt;xmodmap&lt;/tt&gt; can be used to directly modify the X11 server's keyboard mapping.
However, when working directly in the Linux console, things are a little more complicated without a display server.&lt;/p&gt;
&lt;p&gt;My particular need is to swap the &lt;tt class="docutils literal"&gt;Caps Lock&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; keys; as a &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; user, I use &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; constantly to return to Normal mode.
To be more efficient and avoid the possibility of repetitive strain injury from long-term pinky stretching to reach &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt;, the following line
can be added to the file &lt;tt class="docutils literal"&gt;/etc/rc.local&lt;/tt&gt;, before the final line &lt;tt class="docutils literal"&gt;exit 0&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9b436d8dd64c459d961ced19b433ea0c-1"&gt;&lt;/a&gt;/usr/bin/dumpkeys &lt;span class="p"&gt;|&lt;/span&gt; /bin/sed &lt;span class="s1"&gt;'s/CtrlL_Lock/Escape/'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; /usr/bin/loadkeys
&lt;/pre&gt;&lt;p&gt;If you aren't familiar with Bash, a little explanation might be in order. First, note that this single-line command is actually three
commands separated by the pipe character &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;.
A detailed explanation can be found in the &lt;a class="reference external" href="http://www.tldp.org/LDP/abs/html/io-redirection.html"&gt;Advanced Bash Scripting Guide's chapter on I/O Redirection&lt;/a&gt;, but in short,
piping &lt;tt class="docutils literal"&gt;cmd1 | cmd2&lt;/tt&gt; sends the output of &lt;tt class="docutils literal"&gt;cmd&lt;/tt&gt; as input for &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The programs &lt;tt class="docutils literal"&gt;/usr/bin/dumpkeys&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/usr/bin/loadkeys&lt;/tt&gt; are fairly self-explanatory: they output keymaps for the console
at the kernel level, and update that keymap if a valid file is input, respectively.
The middle command, &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt;, is a powerful, general-purpose stream editor, and the source of much Linux wizardry. To understand what it's doing,
take a look at its argument: the string &lt;tt class="docutils literal"&gt;'/s/CtrlL_Lock/Escape/'&lt;/tt&gt;. This tells &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; to &lt;em&gt;s&lt;/em&gt; ubstitute the first instance of &lt;tt class="docutils literal"&gt;CtrlL_Lock&lt;/tt&gt;
with &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; on any matching line from its input (adding &lt;tt class="docutils literal"&gt;g&lt;/tt&gt; after the last slash makes it a truly global substitution and not linewise.)
The &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; command then passes along the modified stream to &lt;tt class="docutils literal"&gt;loadkeys&lt;/tt&gt;. Because this line is added to &lt;tt class="docutils literal"&gt;/etc/rc.local&lt;/tt&gt;, it will be executed
every boot, swapping &lt;tt class="docutils literal"&gt;Caps Lock&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; in the Linux console.&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>raspberry_pi</category><guid>/blog/linux-console-capsescape-swap/</guid><pubDate>Wed, 18 May 2016 03:40:12 GMT</pubDate></item><item><title>Using Running Averages in Python to Validate Sensor Data</title><link>/blog/using-running-averages-in-python-to-validate-sensor-data/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p class="h3"&gt;Handling Signals&lt;/p&gt;
&lt;p&gt;If you are writing code to respond to sensor data, you should use a bit of logical
abstraction to have clean code that doesn't become harder to work on with time.
For example, at a low level, you're getting some signal, likely a voltage, that is
supposed to represent another physical signal (in an abstract sense), like a distance
or temperature. However, the signal you are actually accessing in the code is just
a measurement, e.g. a voltage and not the &lt;em&gt;true&lt;/em&gt; distance. At some point in the code,
hopefully a well-tested library already written by someone else, this voltage signal
has some math done to it and becomes a number that is hopefully pretty close to the
measurement we care about. Later on in the code, in regions &lt;em&gt;we&lt;/em&gt; are usually responsible
for, it would be nice to treat that number as the real thing, and make whatever system
we're designing to respond accordingly. Going in blindly, though, can be a recipe for
disaster. Why?&lt;/p&gt;
&lt;p class="h3"&gt;Trust, But Verify&lt;/p&gt;
&lt;p&gt;Sometimes physical components fail. Maybe someone's skin oil, left behind during setup
or installation, is changing some overall resistance and invaliding our assumptions, and
math, about a voltage signal across a wire. Water, rust, rot, and an infinite number of
other failure mechanisms can plague the best-designed system, so a good rule of thumb is to
trust, but verify.&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/using-running-averages-in-python-to-validate-sensor-data/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>control_theory</category><category>mathjax</category><category>python</category><guid>/blog/using-running-averages-in-python-to-validate-sensor-data/</guid><pubDate>Thu, 05 May 2016 10:09:04 GMT</pubDate></item><item><title>Keeping zoom level when navigating PDF in Evince, GNOME's Document Viewer</title><link>/blog/keeping-zoom-level-when-navigating-pdf-in-evince-gnomes-document-viewer/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;This one is short, sweet, and to the point. How often do you have your PDF set to a nice zoom level, only to have it reset when navigating via the Bookmarks/Index? If you use GNOME as a Linux DE (desktop environment), then you can fire up a terminal and use this &lt;tt class="docutils literal"&gt;gsettings&lt;/tt&gt; one-liner to preserve zoom:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_03d19784111245b4b5cf1c14c99aba96-1"&gt;&lt;/a&gt;gsettings &lt;span class="nb"&gt;set&lt;/span&gt; org.gnome.Evince allow-links-change-zoom &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A great alternative PDF reader is the &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;-key friendly &lt;a class="reference external" href="https://pwmt.org/projects/zathura/"&gt;zathura&lt;/a&gt;. I've had issues opening larger PDFs with it though, so your mileage may vary.&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><guid>/blog/keeping-zoom-level-when-navigating-pdf-in-evince-gnomes-document-viewer/</guid><pubDate>Sun, 24 Apr 2016 21:51:08 GMT</pubDate></item><item><title>Connecting a Raspberry Pi to Texas A&amp;M Wifi via Command Line</title><link>/blog/connecting-a-raspberry-pi-to-texas-am-wifi/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;The recommended flavor of Linux on the Raspberry Pi, Raspbian, uses the LXDE desktop environment, and using its GUI tools to set up wifi is not immediately successful.
Command-line setup involves editing two files, &lt;tt class="docutils literal"&gt;/etc/network/interfaces&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/tt&gt;. Since these are system files, they won't be writable by a normal user. The command &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;-e&lt;/span&gt; &amp;lt;filename&amp;gt;&lt;/tt&gt; can be used to edit system files with superuser privileges, using the default editor. Normally, this is the program &lt;tt class="docutils literal"&gt;nano&lt;/tt&gt;, which is fairly self-explanatory; make your changes using the keyboard and save the file with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Ctrl-X&lt;/span&gt;&lt;/tt&gt;. For advanced users, this can be changed via something like &lt;tt class="docutils literal"&gt;export EDITOR=vi&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The first file, &lt;tt class="docutils literal"&gt;/etc/network/interfaces&lt;/tt&gt;, needs to have the following:&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/connecting-a-raspberry-pi-to-texas-am-wifi/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>raspberry_pi</category><guid>/blog/connecting-a-raspberry-pi-to-texas-am-wifi/</guid><pubDate>Thu, 21 Apr 2016 23:46:17 GMT</pubDate></item><item><title>Primer on Python Projects</title><link>/blog/primer-on-python-projects/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm helping all the teams in my BAEN370 class robotics competition (essentially our final) since I competed in the ASABE Robotics Competition last year in New Orleans.
This post is advice mainly targeted at everyone in the class.
Here are a few useful snippets when starting your first big Python project.&lt;/p&gt;
&lt;p class="h3"&gt;Imports&lt;/p&gt;
&lt;p&gt;If you're working on a file, e.g. &lt;tt class="docutils literal"&gt;code.py&lt;/tt&gt;, and it's getting large, you can break off some of that code (usually functions) into another file. Let's say you name this file &lt;tt class="docutils literal"&gt;functions.py&lt;/tt&gt;. Then, in your original file, you would add to the top:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a3ee439d44154cd6ab9de9eb96333691-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function2&lt;/span&gt; &lt;span class="c1"&gt;# etc&lt;/span&gt;
&lt;a name="rest_code_a3ee439d44154cd6ab9de9eb96333691-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# if you have a lot of functions, you can use something like&lt;/span&gt;
&lt;a name="rest_code_a3ee439d44154cd6ab9de9eb96333691-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# from functions import (function1, function2, ... ,&lt;/span&gt;
&lt;a name="rest_code_a3ee439d44154cd6ab9de9eb96333691-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#                        functionN_minus_one, functionN)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;An example of how to use this, in the context of BAEN370, would be using the following project structure:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
baen370/
├── run.py
├── navigation.py
└── sensors.py
&lt;/pre&gt;
&lt;p&gt;Then, those files' contents would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/primer-on-python-projects/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>/blog/primer-on-python-projects/</guid><pubDate>Sun, 10 Apr 2016 12:58:54 GMT</pubDate></item><item><title>Equation Solving with Python &amp; SymPy</title><link>/blog/equation-solving-with-python/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;In engineering applications, the same equation will be solved over and over with
different values or measurements as inputs. Anticipating this, we can either
write one function for each variable which inputs all other variables, or take a
much easier route using &lt;a class="reference external" href="http://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following example is a simple implementation of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Manning_formula"&gt;Manning's formula&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;\[
v = \frac{k}{n} {R_h}^{2/3} S^{1/2}
\]&lt;/p&gt;
&lt;p&gt;with &lt;span class="math"&gt;\(k = 1.49\)&lt;/span&gt; since we most often work in English units in American
hydrology. Note that the variable &lt;tt class="docutils literal"&gt;mannings_eqn&lt;/tt&gt; is actually the above
expression set equal to 0, so that we see a &lt;span class="math"&gt;\(-v\)&lt;/span&gt; term.&lt;/p&gt;
&lt;p&gt;The following code creates Sympy &lt;tt class="docutils literal"&gt;Symbol&lt;/tt&gt;s for each variable in the expression.
In general, if we have &lt;span class="math"&gt;\(n\)&lt;/span&gt; variables in the expression, we can pass in a
&lt;tt class="docutils literal"&gt;dict&lt;/tt&gt; with &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; key-value pairs (equations) with known values
to solve for the &lt;span class="math"&gt;\(n\)&lt;/span&gt;th variable. We can create &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt;s with keys, the
set of knowns, and pass in any (independent) combination of &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; variables from
our expression to get a number.&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/equation-solving-with-python/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><category>python</category><guid>/blog/equation-solving-with-python/</guid><pubDate>Sun, 10 Apr 2016 11:12:16 GMT</pubDate></item></channel></rss>