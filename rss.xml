<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Biosystems Engineering Blog</title><link>https://kkremitzki.github.io/</link><description>Notes on my journey in biosystems engineering.</description><atom:link href="/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 22 Jun 2017 00:10:45 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GSoC Week 2 recap</title><link>/blog/gsoc-week-2-recap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;With the four major bugs blocking the usage of &lt;tt class="docutils literal"&gt;PartDesign Mirrored&lt;/tt&gt; fixed,
I started out the week exploring the now-functioning tool with the goal of getting what I call "command test coverage".
In short, this means testing major variations for tools presented to the user in the PartDesign WB.&lt;/p&gt;
&lt;p&gt;For reference, they are depicted and categorized in figures 1 and 2,
with the newly redesigned icons made by &lt;a class="reference external" href="https://github.com/agryson"&gt;Alexander Gryson&lt;/a&gt; (kudos to his major rework of all of FreeCAD's icons!)&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="command palette" src="/images/gsoc-2-1.png" style="width: 900px;"&gt;
&lt;p class="caption"&gt;Figure 1. Datum tools, additive/subtractive features and primitives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="command palette" src="/images/gsoc-2-2.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 2. Transformations, dressup features, and multi-body boolean operation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Mirrored tool takes as input feature(s) and a mirror plane, but the other transformation tools like LinearPattern and PolarPattern behave in a fundamentally similar way.
By that reasoning, I figured that tests regarding the Mirrored tool really only have two major permutations if one assumes valid input:
the case where a choice of features and plane succeeds, and one where it doesn't.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirrored success" src="/images/gsoc-2-3.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 3. Success!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirrored failure" src="/images/gsoc-2-4.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 4. Failure...&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So, I cleaned up the test case submission I started GSoC out with, &lt;tt class="docutils literal"&gt;testMirroredSketchCase&lt;/tt&gt;,
and added the new case depicted in figure 4, &lt;tt class="docutils literal"&gt;testMirroredOffsetFailureCase&lt;/tt&gt;.
However, I noticed both of my test cases involved &lt;tt class="docutils literal"&gt;Sketch&lt;/tt&gt;-based additive features, but no additive primitives.
So, I also included &lt;tt class="docutils literal"&gt;testMirroredPrimitiveCase&lt;/tt&gt; in &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD/pull/816"&gt;FreeCAD PR#816&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's nice is that besides &lt;tt class="docutils literal"&gt;PartDesign Mirrored&lt;/tt&gt; now being fixed, several other transformation tools' bugs were resolved.
Altogether, the PR resolved four issues, &lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=2235"&gt;2235&lt;/a&gt;,
&lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=2248"&gt;2248&lt;/a&gt;, &lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=3006"&gt;3006&lt;/a&gt;,
and &lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=3065"&gt;3065&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With all that wrapped up,
I moved on to adding tests for the various options for the fundamental sketch-based features &lt;tt class="docutils literal"&gt;Pad&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Pocket&lt;/tt&gt;.
Altogether, I added &lt;tt class="docutils literal"&gt;testPadToFirstCase&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testPadtoLastCase&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testPadToFaceCase&lt;/tt&gt;,
and &lt;tt class="docutils literal"&gt;testPadTwoDimensionsCase&lt;/tt&gt; to cover the options for &lt;tt class="docutils literal"&gt;PartDesign Pad&lt;/tt&gt;.
Unfortunately, these test cases are not very interesting to look at and mostly involve 2-4 lined up cubes similar to
what figure 3 looks like.&lt;/p&gt;
&lt;p&gt;However, for &lt;tt class="docutils literal"&gt;PartDesign Pad&lt;/tt&gt;, things do get a little more interesting.
The base case is a simple reversed pad with a pocket in the middle, shown in figure 5.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirrored failure" src="/images/gsoc-2-5.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 5. The base Pocket test construction.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It was straightforward to add &lt;tt class="docutils literal"&gt;testPocketDimensionCase&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testPocketThroughAllCase&lt;/tt&gt;,
and &lt;tt class="docutils literal"&gt;testPocketToFirstCase&lt;/tt&gt;.
However, covering the last Pocket option with &lt;tt class="docutils literal"&gt;testPocketToFaceCase&lt;/tt&gt; is not (necessarily) so trivial.&lt;/p&gt;
&lt;p&gt;If you refer to figure 5, you'll note that the base Pad feature is a hexahedron, or six-sided shape.
The Pocket feature adds four new faces to the overall shape, &lt;tt class="docutils literal"&gt;Face7&lt;/tt&gt; through &lt;tt class="docutils literal"&gt;Face10&lt;/tt&gt;.
However, references relying on the numbering of those faces is inherently brittle and is being addressed
by another one of the GSoC projects this year.
Because of that, I'll give a little bit more thought on how to construct the test before proceeding.&lt;/p&gt;&lt;/div&gt;</description><category>freecad</category><category>gsoc</category><guid>/blog/gsoc-week-2-recap/</guid><pubDate>Sun, 18 Jun 2017 23:40:33 GMT</pubDate></item><item><title>GSoC Week 1 Recap</title><link>/blog/gsoc-week-1-recap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;The first week of Google Summer of Code has ended, and so it's time for a recap post!&lt;/p&gt;
&lt;p&gt;The main topic this week was &lt;a class="reference external" href="https://www.freecadweb.org/wiki/PartDesign_Mirrored"&gt;PartDesign Mirrored&lt;/a&gt;, a fairly self-explanatory feature,
with a show-stopping bug explained in &lt;a class="reference external" href="https://freecadweb.org/tracker/view.php?id=3006"&gt;FreeCAD issue 3006&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="unit cube construction" src="/images/gsoc-1-1.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 1. The base of my PartDesign Mirrored experiments.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this picture, we have a simple &lt;tt class="docutils literal"&gt;1 mm&lt;/tt&gt; square sketch (pictured in white) attached to the &lt;span class="math"&gt;\(xy\)&lt;/span&gt;-plane.
One corner is at the origin, and the sketch is the base for a Pad feature &lt;tt class="docutils literal"&gt;1 mm&lt;/tt&gt; high.
Length is handled internally as &lt;tt class="docutils literal"&gt;mm&lt;/tt&gt; by FreeCAD, so this "unit cube" serves as a useful basis for testing behavior.
A useful alteration involves displacing this cube, say, &lt;tt class="docutils literal"&gt;1 mm&lt;/tt&gt; up the &lt;span class="math"&gt;\(y\)&lt;/span&gt;-axis.
This constructs a case where mirroring not all mirrorings should succeed, but we'll get into that later.&lt;/p&gt;
&lt;p&gt;Let's turn now to the bug itself, depicted in figure 2.
The unit cube is supposed to be mirrored about its vertical sketch axis (the &lt;span class="math"&gt;\(y\)&lt;/span&gt;-axis, pictured running off to the top right.)
Obviously, it's not, and the failure is helpfully represented in red.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirroring bug" src="/images/gsoc-1-2.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 2. FreeCAD bug 3006 in action.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note that the body diagonal of the mirrored part should run from the origin to  &lt;span class="math"&gt;\((-1, 1, 1)\)&lt;/span&gt;.
Instead, it's going to &lt;span class="math"&gt;\((1, -1, -1)\)&lt;/span&gt;, in the opposite direction.&lt;/p&gt;
&lt;p&gt;Well, this was my first really serious bug to tackle for the summer.
I chose this as a way to really dive in, since it directly involves Open CASCADE, the open source C++ geometry kernel at the heart of FreeCAD.&lt;/p&gt;
&lt;p&gt;However, my programming background is chiefly with Python (as well as JavaScript and Lua), all interpreted languages.
One nicety of that sort of language is that it can be very quick to debug and examine behavior using the interpreter.
There is a Python debugger, &lt;tt class="docutils literal"&gt;pdb&lt;/tt&gt;, but I rarely needed to use it for my mostly personal-sized projects.
Even then, it's quite straightforward to use since you're already in an interpreter-native environment.&lt;/p&gt;
&lt;p&gt;C++ is a very different beast. In this case, stepping through the code with a debugger was my only choice.
I use Neovim as my IDE, though, so I wanted a way to combine the power of my text editor with my debugger.
So, I found and set up &lt;a class="reference external" href="https://github.com/dbgx/lldb.nvim"&gt;LLDB.nvim&lt;/a&gt;, an LLDB frontend, with an event-based, non-blocking UI,
session-saving, and
"... takes advantage of Neovim's job API to spawn a separate process and communicates with the Neovim process using RPC calls."&lt;/p&gt;
&lt;p&gt;Pretty nice. Anyway, I was able to step through the code and see exactly what was flying around, just like I wanted.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="neovim" src="/images/neovim1.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 3. Neovim in an LLDB debug session.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So, what was the problem? Hah! Not so simple. Turns out there are &lt;em&gt;at least four bugs here!!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, the algorithm which first checks if the mirrored shapes are adjacent and thus, can be fused, was broken.&lt;/p&gt;
&lt;p&gt;Once this failed, FreeCAD then attempts to generate a mesh from the shape, and then converts a generalized transformation object representing the mirroring into a matrix to put the mesh in the correct place.
It turns out that in Open CASCADE 7.0.0, the &lt;tt class="docutils literal"&gt;gp_Trsf&lt;/tt&gt; API was changed so that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gp_Trsf::VectorialPart()&lt;/span&gt;&lt;/tt&gt; returns a 3x3 matrix including the scale factor.
The previous behavior was to return the homogeneous part of the transformation which does not include the scale factor, and the FreeCAD algorithm for constructing the 4x4 matrix for the mesh included multiplying every term by a scale factor.
In other words, the scale factor multiplication was happening twice. The scale factor I had observed in the debugger was -1, so this perfectly explained the inverted positioning of the failure result!&lt;/p&gt;
&lt;p&gt;The third bug, of a much more minor nature, involved a a classic "failure... success!" message displayed in the event of a mirroring failure, and was easier to fix.&lt;/p&gt;
&lt;p&gt;The fourth, though, was a bit trickier! It only appeared when fixing the mesh placement.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="new mirroring bug" src="/images/gsoc-1-3.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 4. A strange, new mirroring bug.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This one was diagnosed by ickby, my mentor for this project.
It turns out the failure meshes' faces were getting constructed inside out, and so the material's color was not considered "illuminated".&lt;/p&gt;
&lt;p&gt;The three of us considered a few different options to get around this. One way would be to use Coin3D, FreeCAD's scene graph library, and change the material
properties to define something that looked the same, illuminated or not. Another is to essentially duplicate each face with the second instance having an inverted normal, so that you're guaranteed to have an outward-facing face.&lt;/p&gt;
&lt;p&gt;The fix ended up being much simpler than that! It was possible to simply change the vertex ordering. Originally, it was set to &lt;tt class="docutils literal"&gt;COUNTERCLOCKWISE&lt;/tt&gt;.
However, in figure 4, you can see that simply changing it to &lt;tt class="docutils literal"&gt;CLOCKWISE&lt;/tt&gt; would not be an obvious fix.
Abdullah also fixed this one, presumably by checking the docs for that option and finding that there was an "option C", &lt;tt class="docutils literal"&gt;UNKNOWN&lt;/tt&gt;. That did the trick!&lt;/p&gt;
&lt;p&gt;So now, PartDesign Mirrored is fixed and ready. Not a bad start for the summer!&lt;/p&gt;
&lt;!-- Open CASCADE and quaternions --&gt;
&lt;!-- Transformation matrices --&gt;
&lt;!-- OpenInventor and tessellation --&gt;
&lt;!-- Plans for the future --&gt;
&lt;!-- Rebuild test --&gt;&lt;/div&gt;</description><category>freecad</category><category>gsoc</category><category>mathjax</category><guid>/blog/gsoc-week-1-recap/</guid><pubDate>Tue, 06 Jun 2017 19:28:12 GMT</pubDate></item><item><title>My FreeCAD project was accepted into Google Summer of Code!</title><link>/blog/my-freecad-project-was-accepted-into-google-summer-of-code/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;It's been almost a year since my last post, which just so happened to be about FreeCAD
as well. It's been a busy year: I've been studying machine design, robotics; partial differential
equations in general, and heat and mass transfer in particular. I've also been studying the source
code of FreeCAD while honing my sysadmin skills by helping maintain project infrastructure.
My hard work has paid off, and &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#5752969237626880"&gt;my Google Summer of Code project proposal &lt;/a&gt;
was accepted! I'm going to be working on improving the parametric part design workbench and writing
test code to make the module more robust for future development.&lt;/p&gt;
&lt;p&gt;As a result, I've decided to publish my daily log here. I'll be posting weekly summaries once the
coding period begins on May 30, as well as more in-depth ad hoc blogging on interesting developments over the summer.
My goal is to both document my project and to produce a useful reference for other developers wanting to get started
contributing to FreeCAD.&lt;/p&gt;
&lt;p&gt;The rest of May is part of the Community Bonding Period, and so I'll ramp up to full speed with an introductory series
of posts. Here are a few rough-draft titles to highlight my planned topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/distcc/distcc"&gt;Neovim&lt;/a&gt; as an IDE:&lt;ol class="arabic"&gt;
&lt;li&gt;Building your base, or practically pluginless&lt;/li&gt;
&lt;li&gt;What makes an IDE? An overview of features&lt;/li&gt;
&lt;li&gt;Unix as an IDE, or knowing your tools&lt;/li&gt;
&lt;li&gt;Neovim with Python 2 and 3&lt;/li&gt;
&lt;li&gt;Neovim with C++&lt;/li&gt;
&lt;li&gt;Asynchronous autobuilding with Neovim&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Distributed compilation with &lt;a class="reference external" href="https://github.com/distcc/distcc"&gt;distcc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Speaking source code: how to fix your first FreeCAD bug&lt;/li&gt;
&lt;li&gt;Contributing to open source communities (and FreeCAD in particular)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>freecad</category><guid>/blog/my-freecad-project-was-accepted-into-google-summer-of-code/</guid><pubDate>Sat, 06 May 2017 07:41:23 GMT</pubDate></item><item><title>Getting Started with FreeCAD Development in Ubuntu 16.04</title><link>/blog/getting-started-with-freecad-development-in-ubuntu-1604/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.freecadweb.org/"&gt;FreeCAD&lt;/a&gt; is a multi-platform (Windows, Mac, Linux) open source parametric 3D CAD modeler, and can read
and write many open file formats.&lt;/p&gt;
&lt;p&gt;An explanation of the many virtues of open source software can be found at &lt;a class="reference external" href="http://opensourceforamerica.org/learn-more/benefits-of-open-source-software/"&gt;Open Source for America&lt;/a&gt; and elsewhere. To quote OSFA,&lt;/p&gt;
&lt;blockquote&gt;
The Open Source model harnesses the power of distributed peer review and transparency to create high-quality, secure
and easily integrated software at an accelerated pace and lower cost.&lt;/blockquote&gt;
&lt;p&gt;Commerical-grade CAD software, while incredibly useful, has several downsides including being locked behind 4 or 5 digit licensing costs,
and its use in amateur projects or the developing world is often facilitated by piracy. FreeCAD, on the other hand, is free as in beer
and free as in freedom, although it is currently under development. However, one of the benefits of the open source model is the ease
with which interested people can contribute to the project and make better tools for all mankind.&lt;/p&gt;
&lt;p&gt;While using FreeCAD, I noticed a few typos in the menus; although my first contribution to the project wasn't too significant, I
documented the process of getting a development environment set up on my Ubuntu 16.04 desktop so that others could follow the same
steps and begin contributing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pull down a copy of the code. (If you don't have a copy of git, run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install git&lt;/tt&gt;.)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_6f304aa6edf54310b13ca0278ede9786-1"&gt;&lt;/a&gt;git clone https://github.com/FreeCAD/FreeCAD.git freecad-code
&lt;a name="rest_code_6f304aa6edf54310b13ca0278ede9786-2"&gt;&lt;/a&gt;mkdir freecad-build
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Install all dependencies.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_092d45db1dda497ea024546065707533-1"&gt;&lt;/a&gt;sudo apt-get install build-essential cmake python python-matplotlib libtool libcoin80-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-2"&gt;&lt;/a&gt;  libsoqt4-dev libxerces-c-dev libboost-dev libboost-filesystem-dev libboost-regex-dev  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-3"&gt;&lt;/a&gt;  libboost-program-options-dev libboost-signals-dev libboost-thread-dev libboost-python-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-4"&gt;&lt;/a&gt;  libqt4-dev libqt4-opengl-dev qt4-dev-tools python-dev python-pyside pyside-tools &lt;span class="s1"&gt;'liboce*-dev'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-5"&gt;&lt;/a&gt;  oce-draw libeigen3-dev libqtwebkit-dev libshiboken-dev libpyside-dev libode-dev swig libzipios++-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-6"&gt;&lt;/a&gt;  libfreetype6 libfreetype6-dev
&lt;a name="rest_code_092d45db1dda497ea024546065707533-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Install optional packages&lt;/span&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-9"&gt;&lt;/a&gt;sudo apt-get install libsimage-dev checkinstall python-pivy python-qt4 doxygen &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_092d45db1dda497ea024546065707533-10"&gt;&lt;/a&gt;  libcoin80-doc libspnav-dev
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Move into build folder, make and compile the software. Use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-j&lt;/span&gt; $(nproc)&lt;/tt&gt; flag to use all N of your CPU cores
when compiling; some recommend using N + 1 CPU cores, which can be done by instead running &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;-j$((&lt;/span&gt; $(nproc) + 1 )) .&lt;/tt&gt;.
Don't forget the period at the end of the &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; command, which tells it to put the compiled software in the current
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;freecad-build&lt;/span&gt;&lt;/tt&gt; directory; it's good to keep the source code and build directories separate.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1bfb695903464d5c949a8e347b76fd38-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; freecad-build
&lt;a name="rest_code_1bfb695903464d5c949a8e347b76fd38-2"&gt;&lt;/a&gt;cmake ../freecad-code
&lt;a name="rest_code_1bfb695903464d5c949a8e347b76fd38-3"&gt;&lt;/a&gt;make -j&lt;span class="k"&gt;$(&lt;/span&gt;nproc&lt;span class="k"&gt;)&lt;/span&gt; .
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Fix Ubuntu 64-bit issue. If you are using a 64-bit version of Ubuntu (hopefully), you may run in to the following
error message, which occurs because the expected &lt;tt class="docutils literal"&gt;libfreeimage.so&lt;/tt&gt; file was moved into a subdirectory of &lt;tt class="docutils literal"&gt;/usr/lib/&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8d0b1415c0e44af5b9ff66f2cc3e4b99-1"&gt;&lt;/a&gt;make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** No rule to make target &lt;span class="s1"&gt;'/usr/lib/libfreeimage.so'&lt;/span&gt;, needed by &lt;span class="s1"&gt;'lib/libSMDS.so'&lt;/span&gt;.  Stop.
&lt;a name="rest_code_8d0b1415c0e44af5b9ff66f2cc3e4b99-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_8d0b1415c0e44af5b9ff66f2cc3e4b99-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Fix with this line.&lt;/span&gt;
&lt;a name="rest_code_8d0b1415c0e44af5b9ff66f2cc3e4b99-4"&gt;&lt;/a&gt;sudo ln -s /usr/lib/x86_64-linux-gnu/libfreeimage.so /usr/lib
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Once the build is complete, a runnable copy of the FreeCAD executable will be in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;freecad-build&lt;/span&gt;&lt;/tt&gt; folder. Any changes
made to the source code can be tested after re-compiling the executable.&lt;/p&gt;
&lt;p&gt;Hopefully this post helps someone out there! Even if you are only contributing to the documentation as you learn FreeCAD,
your contribution is valuable and can help tons of people across the globe.&lt;/p&gt;&lt;/div&gt;</description><category>foss</category><category>freecad</category><category>linux</category><guid>/blog/getting-started-with-freecad-development-in-ubuntu-1604/</guid><pubDate>Sun, 05 Jun 2016 11:17:51 GMT</pubDate></item><item><title>French Lessons</title><link>/blog/french-lessons/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;Part of my summer is going to be spent studying mathematics in France, but international study is not complete without a foray into the language.
I've always been very interested in linguistics, and one of my long-term goals is to be a polyglot (which first means turning my 4 years of German and 2 years of Chinese into actual mastery), so I was pretty excited when I found my professor
had arranged thrice weekly morning lessons here at the CLA (Centre de Linguistique Appliquée) Besançon. Our lessons are complete immersion style;
the teacher speaks only French, which was quite difficult at first. The only "experience" I have with the language comes from my exposure to Spanish
this spring when I visited Mérida, Yucatán to work on a community garden irrigation project; other than the occasional Spanish or English cognate,
I'm completely in the dark. Luckily, everyone in town is very helpful and accommodating.&lt;/p&gt;
&lt;img alt="/images/cla.jpg" class="align-center" src="/images/cla.jpg" style="width: 638px;"&gt;&lt;/div&gt;</description><guid>/blog/french-lessons/</guid><pubDate>Fri, 27 May 2016 17:20:29 GMT</pubDate></item><item><title>Linux Console Caps/Escape Swap</title><link>/blog/linux-console-capsescape-swap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;Full-fledged Linux desktop environments like GNOME or Ubuntu's Unity often have built-in keyboard mapping tools to meet user needs.
At a lower level, &lt;tt class="docutils literal"&gt;xmodmap&lt;/tt&gt; can be used to directly modify the X11 server's keyboard mapping.
However, when working directly in the Linux console, things are a little more complicated without a display server.&lt;/p&gt;
&lt;p&gt;My particular need is to swap the &lt;tt class="docutils literal"&gt;Caps Lock&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; keys; as a &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; user, I use &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; constantly to return to Normal mode.
To be more efficient and avoid the possibility of repetitive strain injury from long-term pinky stretching to reach &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt;, the following line
can be added to the file &lt;tt class="docutils literal"&gt;/etc/rc.local&lt;/tt&gt;, before the final line &lt;tt class="docutils literal"&gt;exit 0&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_76db1ee80f084b8991909e3932f7c943-1"&gt;&lt;/a&gt;/usr/bin/dumpkeys &lt;span class="p"&gt;|&lt;/span&gt; /bin/sed &lt;span class="s1"&gt;'s/CtrlL_Lock/Escape/'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; /usr/bin/loadkeys
&lt;/pre&gt;&lt;p&gt;If you aren't familiar with Bash, a little explanation might be in order. First, note that this single-line command is actually three
commands separated by the pipe character &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;.
A detailed explanation can be found in the &lt;a class="reference external" href="http://www.tldp.org/LDP/abs/html/io-redirection.html"&gt;Advanced Bash Scripting Guide's chapter on I/O Redirection&lt;/a&gt;, but in short,
piping &lt;tt class="docutils literal"&gt;cmd1 | cmd2&lt;/tt&gt; sends the output of &lt;tt class="docutils literal"&gt;cmd&lt;/tt&gt; as input for &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The programs &lt;tt class="docutils literal"&gt;/usr/bin/dumpkeys&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/usr/bin/loadkeys&lt;/tt&gt; are fairly self-explanatory: they output keymaps for the console
at the kernel level, and update that keymap if a valid file is input, respectively.
The middle command, &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt;, is a powerful, general-purpose stream editor, and the source of much Linux wizardry. To understand what it's doing,
take a look at its argument: the string &lt;tt class="docutils literal"&gt;'/s/CtrlL_Lock/Escape/'&lt;/tt&gt;. This tells &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; to &lt;em&gt;s&lt;/em&gt; ubstitute the first instance of &lt;tt class="docutils literal"&gt;CtrlL_Lock&lt;/tt&gt;
with &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; on any matching line from its input (adding &lt;tt class="docutils literal"&gt;g&lt;/tt&gt; after the last slash makes it a truly global substitution and not linewise.)
The &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; command then passes along the modified stream to &lt;tt class="docutils literal"&gt;loadkeys&lt;/tt&gt;. Because this line is added to &lt;tt class="docutils literal"&gt;/etc/rc.local&lt;/tt&gt;, it will be executed
every boot, swapping &lt;tt class="docutils literal"&gt;Caps Lock&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Escape&lt;/tt&gt; in the Linux console.&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>raspberry_pi</category><guid>/blog/linux-console-capsescape-swap/</guid><pubDate>Wed, 18 May 2016 03:40:12 GMT</pubDate></item><item><title>Using Running Averages in Python to Validate Sensor Data</title><link>/blog/using-running-averages-in-python-to-validate-sensor-data/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p class="h3"&gt;Handling Signals&lt;/p&gt;
&lt;p&gt;If you are writing code to respond to sensor data, you should use a bit of logical
abstraction to have clean code that doesn't become harder to work on with time.
For example, at a low level, you're getting some signal, likely a voltage, that is
supposed to represent another physical signal (in an abstract sense), like a distance
or temperature. However, the signal you are actually accessing in the code is just
a measurement, e.g. a voltage and not the &lt;em&gt;true&lt;/em&gt; distance. At some point in the code,
hopefully a well-tested library already written by someone else, this voltage signal
has some math done to it and becomes a number that is hopefully pretty close to the
measurement we care about. Later on in the code, in regions &lt;em&gt;we&lt;/em&gt; are usually responsible
for, it would be nice to treat that number as the real thing, and make whatever system
we're designing to respond accordingly. Going in blindly, though, can be a recipe for
disaster. Why?&lt;/p&gt;
&lt;p class="h3"&gt;Trust, But Verify&lt;/p&gt;
&lt;p&gt;Sometimes physical components fail. Maybe someone's skin oil, left behind during setup
or installation, is changing some overall resistance and invaliding our assumptions, and
math, about a voltage signal across a wire. Water, rust, rot, and an infinite number of
other failure mechanisms can plague the best-designed system, so a good rule of thumb is to
trust, but verify.&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/using-running-averages-in-python-to-validate-sensor-data/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>control_theory</category><category>mathjax</category><category>python</category><guid>/blog/using-running-averages-in-python-to-validate-sensor-data/</guid><pubDate>Thu, 05 May 2016 10:09:04 GMT</pubDate></item><item><title>Keeping zoom level when navigating PDF in Evince, GNOME's Document Viewer</title><link>/blog/keeping-zoom-level-when-navigating-pdf-in-evince-gnomes-document-viewer/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;This one is short, sweet, and to the point. How often do you have your PDF set to a nice zoom level, only to have it reset when navigating via the Bookmarks/Index? If you use GNOME as a Linux DE (desktop environment), then you can fire up a terminal and use this &lt;tt class="docutils literal"&gt;gsettings&lt;/tt&gt; one-liner to preserve zoom:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8b66c0530d78478e9b01ab31c2f9ab81-1"&gt;&lt;/a&gt;gsettings &lt;span class="nb"&gt;set&lt;/span&gt; org.gnome.Evince allow-links-change-zoom &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A great alternative PDF reader is the &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;-key friendly &lt;a class="reference external" href="https://pwmt.org/projects/zathura/"&gt;zathura&lt;/a&gt;. I've had issues opening larger PDFs with it though, so your mileage may vary.&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><guid>/blog/keeping-zoom-level-when-navigating-pdf-in-evince-gnomes-document-viewer/</guid><pubDate>Sun, 24 Apr 2016 21:51:08 GMT</pubDate></item><item><title>Connecting a Raspberry Pi to Texas A&amp;M Wifi via Command Line</title><link>/blog/connecting-a-raspberry-pi-to-texas-am-wifi/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;The recommended flavor of Linux on the Raspberry Pi, Raspbian, uses the LXDE desktop environment, and using its GUI tools to set up wifi is not immediately successful.
Command-line setup involves editing two files, &lt;tt class="docutils literal"&gt;/etc/network/interfaces&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/tt&gt;. Since these are system files, they won't be writable by a normal user. The command &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;-e&lt;/span&gt; &amp;lt;filename&amp;gt;&lt;/tt&gt; can be used to edit system files with superuser privileges, using the default editor. Normally, this is the program &lt;tt class="docutils literal"&gt;nano&lt;/tt&gt;, which is fairly self-explanatory; make your changes using the keyboard and save the file with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Ctrl-X&lt;/span&gt;&lt;/tt&gt;. For advanced users, this can be changed via something like &lt;tt class="docutils literal"&gt;export EDITOR=vi&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The first file, &lt;tt class="docutils literal"&gt;/etc/network/interfaces&lt;/tt&gt;, needs to have the following:&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/connecting-a-raspberry-pi-to-texas-am-wifi/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>raspberry_pi</category><guid>/blog/connecting-a-raspberry-pi-to-texas-am-wifi/</guid><pubDate>Thu, 21 Apr 2016 23:46:17 GMT</pubDate></item><item><title>Primer on Python Projects</title><link>/blog/primer-on-python-projects/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm helping all the teams in my BAEN370 class robotics competition (essentially our final) since I competed in the ASABE Robotics Competition last year in New Orleans.
This post is advice mainly targeted at everyone in the class.
Here are a few useful snippets when starting your first big Python project.&lt;/p&gt;
&lt;p class="h3"&gt;Imports&lt;/p&gt;
&lt;p&gt;If you're working on a file, e.g. &lt;tt class="docutils literal"&gt;code.py&lt;/tt&gt;, and it's getting large, you can break off some of that code (usually functions) into another file. Let's say you name this file &lt;tt class="docutils literal"&gt;functions.py&lt;/tt&gt;. Then, in your original file, you would add to the top:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8e2b53695f2b49c4879fbcd1847d2b60-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;function1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function2&lt;/span&gt; &lt;span class="c1"&gt;# etc&lt;/span&gt;
&lt;a name="rest_code_8e2b53695f2b49c4879fbcd1847d2b60-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# if you have a lot of functions, you can use something like&lt;/span&gt;
&lt;a name="rest_code_8e2b53695f2b49c4879fbcd1847d2b60-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# from functions import (function1, function2, ... ,&lt;/span&gt;
&lt;a name="rest_code_8e2b53695f2b49c4879fbcd1847d2b60-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#                        functionN_minus_one, functionN)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;An example of how to use this, in the context of BAEN370, would be using the following project structure:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
baen370/
├── run.py
├── navigation.py
└── sensors.py
&lt;/pre&gt;
&lt;p&gt;Then, those files' contents would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="/blog/primer-on-python-projects/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>/blog/primer-on-python-projects/</guid><pubDate>Sun, 10 Apr 2016 12:58:54 GMT</pubDate></item></channel></rss>