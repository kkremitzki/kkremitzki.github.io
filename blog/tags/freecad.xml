<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Biosystems Engineering Blog (Posts about freecad)</title><link>https://kkremitzki.github.io/</link><description></description><atom:link href="/blog/tags/freecad.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 01 Mar 2019 08:16:58 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>My Free Software Activities in January &amp; February 2019</title><link>/blog/my-free-software-activities-in-january-february-2019/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;Hello all and welcome again to another of my monthly summary posts on my work
in free software, with a focus on open engineering in &lt;a class="reference external" href="https://www.debian.org/"&gt;Debian&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="https://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt;.  I'm
fortunate to have the &lt;a class="reference external" href="https://lists.debian.org/debian-devel-announce/2019/02/msg00008.html"&gt;February 12th Debian 10 soft freeze deadline&lt;/a&gt; to
scapegoat for my missed January update, and thanks too to February for being
short enough to postpone it further and combine the two updates.&lt;/p&gt;
&lt;p&gt;I've decided to go with a bit of a dryer chronological approach to this update
as there's lots to cover. Worth highlighting, however:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="highlights"&gt;
&lt;h2&gt;Highlights&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New Debian upload for a &lt;a class="reference external" href="https://www.freecadweb.org/"&gt;FreeCAD&lt;/a&gt; 0.18 pre-release&lt;/li&gt;
&lt;li&gt;New Debian upload for &lt;a class="reference external" href="https://www.openfoam.com/"&gt;OpenFOAM&lt;/a&gt;. An upstream
switch from openfoam.org to openfoam.com and a different versioning scheme
results in a massive version bump, 4.1 to 1812. That's over 1800 versions better.
(Seriously though, it's about a 2 year bump in changes.)&lt;/li&gt;
&lt;li&gt;New Debian uploads for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Mesh_generation"&gt;mesh generation&lt;/a&gt; softwares &lt;a class="reference external" href="http://gmsh.info/"&gt;Gmsh&lt;/a&gt; 4.1.3 and &lt;a class="reference external" href="https://ngsolve.org/"&gt;Netgen&lt;/a&gt; 6.2.1810 --
though Netgen might miss Debian 10? It's stuck in the NEW queue.&lt;/li&gt;
&lt;li&gt;FreeCAD is participating in Google Summer of Code and I'm looking for a
student to mentor&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;div class="section" id="january"&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jan 6: &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=8&amp;amp;t=25175&amp;amp;start=20#p278504"&gt;Updated&lt;/a&gt;
the &lt;a class="reference external" href="https://freecadweb.org/tracker"&gt;FreeCAD bug tracker&lt;/a&gt; to the latest
version.&lt;/li&gt;
&lt;li&gt;Jan 12: Completed transition of FreeCAD PPAs to new versions of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Coin3D"&gt;Coin3D&lt;/a&gt; &amp;amp; its Python bindings package Pivy,
which &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=8&amp;amp;t=26599"&gt;resolved a major breakage caused by me on Dec 29&lt;/a&gt; but was a necessary
precursor to a FreeCAD 0.18 release; I just didn't execute it as well as I
should have&lt;/li&gt;
&lt;li&gt;Jan 16: &lt;a class="reference external" href="https://tracker.debian.org/news/1021265/accepted-openfoam-1812dfsg1-1exp1-source-into-experimental/"&gt;Upload&lt;/a&gt;
of OpenFOAM 1812.&lt;/li&gt;
&lt;li&gt;Jan 18: &lt;a class="reference external" href="https://github.com/aewallin/opencamlib/issues/31#issuecomment-455452094"&gt;Discussed on GitHub&lt;/a&gt;
with the upstream of &lt;a class="reference external" href="http://www.anderswallin.net/cam/"&gt;OpenCAMLib&lt;/a&gt; about
release plans now that it is Python 3 compatible&lt;/li&gt;
&lt;li&gt;Jan 19: &lt;a class="reference external" href="https://github.com/libMesh/libmesh/issues/2003"&gt;Contact via GitHub issue&lt;/a&gt; with &lt;a class="reference external" href="http://libmesh.github.io/"&gt;libMesh&lt;/a&gt; upstream about Debian packaging, with
enthusiastic response.&lt;/li&gt;
&lt;li&gt;Jan 19: &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD/pull/1916"&gt;FreeCAD pull request&lt;/a&gt; to fix Start Workbench
behavior in Debian/Ubuntu since we can't include binary &lt;a class="reference external" href="https://www.freecadweb.org/wiki/File_Format_FCStd"&gt;.FCStd&lt;/a&gt; examples, even though
they're glorified ZIPs, for Debian Free Software Guidelines reasons (or can we?
please contact me if you know otherwise)&lt;/li&gt;
&lt;li&gt;Jan 25-27: Hosted &lt;a class="reference external" href="https://wiki.debian.org/BSP/2019/01/us/Austin"&gt;Austin Debian Bug Squashing Party&lt;/a&gt;. Unfortunately, it wasn't
very successful in drawing in people besides those already interested in Debian
at the host venue, the &lt;a class="reference external" href="http://atxhs.org/wiki/Main_Page"&gt;ATX Hackerspace&lt;/a&gt;. I
didn't want to over-advertise it since the venue was limited in capacity, which
in retrospect was a mistake. Oh well, there was also plenty to learn for the
next one. The following bugs were closed: 918479, 888026, 884092, 886538,
882510, 899099, 920525, 919711.&lt;/li&gt;
&lt;li&gt;Jan 26: &lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=8&amp;amp;t=26599"&gt;Announced&lt;/a&gt; the experimental
&lt;a class="reference external" href="https://staging.freecad.io"&gt;staging.freecad.io&lt;/a&gt;, an instance of FreeCAD's
homepage designed to test possible improvements to be had by moving away from
shared hosting&lt;/li&gt;
&lt;li&gt;Jan 28: &lt;a class="reference external" href="https://github.com/sfepy/sfepy/issues/496"&gt;Contact via GitHub issue&lt;/a&gt; with &lt;a class="reference external" href="http://sfepy.org/doc-devel/index.html"&gt;sfepy&lt;/a&gt; upstream about it failing to build
from source to try to get help on issue potentially preventing it from being
included in Debian 10.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="february"&gt;
&lt;h3&gt;February&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Feb 4: Sponsored uploads of &lt;a class="reference external" href="https://tracker.debian.org/news/1027009/accepted-freecad-018pre1dfsg1-1exp1-source-all-amd64-into-experimental-experimental/"&gt;FreeCAD 0.18 pre-release&lt;/a&gt;
and &lt;a class="reference external" href="https://tracker.debian.org/news/1027010/accepted-gmsh-413ds1-1-source-amd64-all-into-unstable-unstable/"&gt;Gmsh 4.1.3&lt;/a&gt;
into Unstable, thanks Anton Gladky.&lt;/li&gt;
&lt;li&gt;Feb 4: Announced &lt;a class="reference external" href="https://tracker.freecad.io"&gt;tracker.freecad.io&lt;/a&gt;, an
experimental instance of FreeCAD's bug tracker designed to test possible
improvements to be had from moving away from shared hosting&lt;/li&gt;
&lt;li&gt;Feb 5: Regained control of abandoned FreeCAD Snap, which was a pre-release of
0.17, by way of the uploader returning from MIA and adding me.&lt;/li&gt;
&lt;li&gt;Feb 9: &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD-Homepage/pull/33"&gt;Merge PR&lt;/a&gt; for
FreeCAD-Homepage repo to add Expires headers and unset ETags to try to get
better performance&lt;/li&gt;
&lt;li&gt;Feb 13: &lt;a class="reference external" href="https://github.com/sfepy/sfepy/issues/496#issuecomment-463089344"&gt;Confirmed sfepy upstream fix resolved the issue&lt;/a&gt;, but it
came a day after the soft freeze preventing re-entry to Testing.&lt;/li&gt;
&lt;li&gt;Feb 23: &lt;a class="reference external" href="https://tracker.debian.org/news/1031845/accepted-python-fluids-0173-1-source-into-unstable/"&gt;Upload&lt;/a&gt;
of python-fluids 0.1.73, experiment with &lt;a class="reference external" href="https://salsa.debian.org/salsa-ci-team/pipeline/blob/master/README.md"&gt;Salsa GitLab CI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Feb 25: &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt;
organizations announced. FreeCAD participating under umbrella organization
OpenCAx led by &lt;a class="reference external" href="https://brlcad.org/"&gt;BRL-CAD&lt;/a&gt;. I created a &lt;a class="reference external" href="https://github.com/opencax/GSoC/issues/13"&gt;GitHub issue&lt;/a&gt; for the project I'd like to
mentor. I'm looking for a student interested in improving the state of Debian &amp;amp;
Ubuntu packaging for FreeCAD and its ecosystem of packages. Particularly -- not
everyone's first encounter with FreeCAD is with the latest and greatest
version. If someone installs an old version and has a bad experience with an
easily fixable packaging bug, we should try to tackle that issue to not drive
away people who are already interested, but get a bad impression.&lt;/li&gt;
&lt;li&gt;Feb 25: Sponsored &lt;a class="reference external" href="https://ftp-master.debian.org/new/netgen_6.2.1810+dfsg1-1.html"&gt;upload&lt;/a&gt; of Netgen to
Unstable, thanks Anton Gladky. Netgen had to re-enter NEW because I made a
mistake in the naming of the binary package, so I had to revise the package to
make libnglib-6.2 (for the .1810 release) replace libnglib-6.2.1804.&lt;/li&gt;
&lt;li&gt;Feb 25: Sponsored &lt;a class="reference external" href="https://ftp-master.debian.org/new/pycollada_0.6-1.html"&gt;upload&lt;/a&gt;
of &lt;a class="reference external" href="https://github.com/pycollada/pycollada"&gt;pycollada&lt;/a&gt; which adds Python 3
support and a python3- package, so it has to pass through NEW again.&lt;/li&gt;
&lt;li&gt;Feb 28: &lt;a class="reference external" href="https://tracker.debian.org/news/1033005/accepted-opencascade-730dfsg1-5-source-into-unstable/"&gt;Upload&lt;/a&gt;
of &lt;a class="reference external" href="https://www.opencascade.com/"&gt;OpenCASCADE&lt;/a&gt;, revising the package to
revert to the default 'opencascade' installation paths instead of 'occt' (a
not-so-great packaging decision as OpenCASCADE was my 2nd ever Debian package)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sponsorship"&gt;
&lt;h2&gt;Sponsorship&lt;/h2&gt;
&lt;p&gt;Verbal support by way of my contact info below is greatly
appreciated, but if you want to help support my free software &amp;amp; open
engineering work financially, I've made it easy with several options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://patreon.com/kkremitzki"&gt;Patreon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://paypal.me/kkremitzki"&gt;PayPal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://liberapay.com/kkremitzki"&gt;Liberapay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.wispay.io/t/0d7"&gt;Wispay&lt;/a&gt; (cryptocurrency)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any level of support is appreciated!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contact"&gt;
&lt;h2&gt;Contact&lt;/h2&gt;
&lt;p&gt;You can follow me on Twitter &lt;a class="reference external" href="https://twitter.com/thekurtwk"&gt;@thekurtwk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm also now on &lt;a class="reference external" href="https://matrix.org/blog/home/"&gt;Matrix&lt;/a&gt;, an open network for
secure, decentralized communication, &lt;a class="reference external" href="https://matrix.to/#/@kkremitzki:matrix.org"&gt;@kkremitzki:matrix.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>debian</category><category>freecad</category><guid>/blog/my-free-software-activities-in-january-february-2019/</guid><pubDate>Fri, 01 Mar 2019 06:10:43 GMT</pubDate></item><item><title>Free Software Activities in November 2018</title><link>/blog/free-software-activities-in-november-2018/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;div class="section" id="intro"&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;Welcome to another of my monthly summaries on my work in the free software
world. My mission is to make engineering and science available for everyone,
and Debian, the Universal Operating System, is my weapon of choice.&lt;/p&gt;
&lt;p&gt;I received some feedback on my last post that I made it seem I would be
stepping away from my role maintaining FreeCAD and other packages on the Debian
Science Team, which was an unfortunate miscommunication on my part. Mainly, I
just would like to reduce the proportion of my overall free software time on
it, from its current amount, nearly 100%, to a roughly even 1/3rd split between
Debian Science, FreeCAD, and PostCAD. The latter is a promising personal
project to make an OpenCASCADE-powered CAD extension for PostgreSQL, bringing
support for CAD file formats, datatypes, and algorithms to the powerful
Postgres ecosystem, similar to what PostCAD has done for geospatial analysis.
This could serve as a backend for both FreeCAD in the short term, and in the
long term, it could power a web-based version of FreeCAD, perhaps with some
Django-powered middleware serving a REST API for some WebGL-based frontend.&lt;/p&gt;
&lt;p&gt;So, besides summarizing my work this month, I also plan to give a synopsis on
my Debian packaging, for both what's in-progress and on my wishlist. As you'll
see, it's quite extensive. My hope is that by whittling away at both lists, my
Debian Science work can focus more on maintenance of existing packages, and
free up some time for other things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sponsors"&gt;
&lt;h2&gt;Sponsors&lt;/h2&gt;
&lt;p&gt;My work on Debian Science, FreeCAD, and PostCAD is &lt;cite&gt;supported by my patrons on
Patreon &amp;lt;https://patreon.com/kkremitzki&amp;gt;&lt;/cite&gt;. While I had created a Liberapay a
while back, I never got any traction with it, and I found out recently that it
was because I had not set it up to actually receive payments. So, if you don't
like Patreon for whatever reason, you can also &lt;a class="reference external" href="https://liberapay.com/kkremitzki"&gt;support me on Liberapay&lt;/a&gt;. Just to round things out, if you don't
like either of those platforms, you can also &lt;a class="reference external" href="https://paypal.me/kkremitzki"&gt;help support my work via PayPal&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="transition-for-coin3"&gt;
&lt;h2&gt;Transition for coin3&lt;/h2&gt;
&lt;p&gt;Coin3D is a scene graph library and a fundamental part of FreeCAD.
Unfortunately, it hasn't had a release since 2011, but development has been
picking up recently, so it's likely that a release is not too far off. Even
without a formal release, several improvements have been made including CMake
support, so it's time to prepare a transition in advance of the Debian 10
release. Luckily, Leo Palomo-Avellaneda has taken the initiative of getting
this transition started.&lt;/p&gt;
&lt;p&gt;Currently, the new Coin3D package is available in Debian Experimental as we
prepare the reverse-dependencies to build against it. For FreeCAD, we directly
depend on Pivy, which are Python bindings for Coin. Pivy, in turn, depends on
Coin and SoQt, which is a Qt GUI component toolkit library for Coin. A
pre-release version of SoQt is also being packaged since, like Coin, CMake
support has been added, as well as support for Qt 5.&lt;/p&gt;
&lt;p&gt;Unfortunately, I've been grinding my gears on building Pivy against the new
Coin and SoQt for a good part of this month, which is especially troublesome
since FreeCAD's transition to Python 3 is blocked by the upload of a new Pivy,
which I prepared earlier this year.&lt;/p&gt;
&lt;p&gt;With any luck, I'll be able to help Leo finish the Coin and SoQt transition and
have Pivy prepared in December.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gmsh-update"&gt;
&lt;h2&gt;Gmsh Update&lt;/h2&gt;
&lt;p&gt;Gmsh is a 3D finite element mesh generator with built-in pre- and
post-processing facilities. It's also one of the main meshers used by FreeCAD's
Finite Element Modeling Workbench, besides Netgen.&lt;/p&gt;
&lt;p&gt;Currently Debian has Gmsh 3.0.6, but a new major version was released in
August. I've already prepared this new major version for testing in FreeCAD's
Community Extras PPA, but I hadn't cleaned up the packaging yet to submit to
Debian. However, in November, there were two point releases, 4.0.5 and 4.0.6,
so I wasn't able to complete this work this month, but I'm sure it'll be done
in early December.&lt;/p&gt;
&lt;p&gt;One major piece of information regarding Gmsh 4 is a change in the API: the
libjava-gmsh3 package in Debian was never meant to be a public API, and so Gmsh
upstream has requested that we no longer ship it. To offset this, there have
been refinements for the actual public API, which officially comes in C, Python
3 and (new) Julia flavors. However, I haven't found much information on Julia
packaging in Debian, so I'll likely hold off on that package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pyside-2-rebuild-ppa-plans"&gt;
&lt;h2&gt;PySide 2 Rebuild &amp;amp; PPA Plans&lt;/h2&gt;
&lt;p&gt;Since FreeCAD is an LGPL-licensed Qt project, we must use PySide and not PyQt
to do Qt things with Python. Because of this, the FreeCAD migration to Qt 5 on
Debian was blocked by the packaging of PySide 2, which was completed by
Freexian SARL over the summer. In Debian, we now have a Qt 5-enabled FreeCAD,
although our daily builds PPA is still using Qt 4.&lt;/p&gt;
&lt;p&gt;Besides the Qt 4-&amp;gt;5 transition, we're also finishing up a Python 2-&amp;gt;3
transition. At the end of the summer I published a &lt;cite&gt;freecad-python3&lt;/cite&gt; package in
the PPA which also used Qt 5. However, it wasn't really fully usable, moreso a
proof-of-concept that such a build indeed buildable.&lt;/p&gt;
&lt;p&gt;At this point, the Debian FreeCAD package has begun to diverge from the FreeCAD
PPAs; besides Qt 5 builds not being available currently, the Debian package has
also been split into several packages (e.g. &lt;cite&gt;libfreecad&lt;/cite&gt;, &lt;cite&gt;freecad-common&lt;/cite&gt;,
etc. packages) in order to better comply with Debian Policy and the Filesystem
Hierarchy Standard.&lt;/p&gt;
&lt;p&gt;So, there's a bit of work to do to catch the PPAs up. First, the package split
needs to be done. Then, I need to upload an alternative &lt;cite&gt;freecad-daily&lt;/cite&gt; package
for Qt 5 builds, separate from Python 3. Once that is done and has undergone
some testing, &lt;cite&gt;freecad-daily&lt;/cite&gt; can be replaced by it, and it in turn can be
replaced by a &lt;cite&gt;freecad-python3&lt;/cite&gt; package for further testing. Since FreeCAD's
0.18 release is imminent, I'll need to get this taken care of during December,
so stay tuned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="packaging-in-progress"&gt;
&lt;h2&gt;Packaging in Progress&lt;/h2&gt;
&lt;p&gt;My first packaging list is all the software I've already started packaging. For
some, it's almost complete, and for others, I've only just begun.&lt;/p&gt;
&lt;p&gt;The purpose of these lists is not to give status updates, but to announce what
all I'm interested in to anyone reading this, and to give an idea of how much
packaging work I have in mind to improve this usage of Debian.&lt;/p&gt;
&lt;div class="section" id="cantera"&gt;
&lt;h3&gt;cantera&lt;/h3&gt;
&lt;div class="section" id="homepage-github"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://cantera.org/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/Cantera/cantera"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
Cantera is an open-source suite of tools for problems involving chemical
kinetics, thermodynamics, and transport processes.&lt;/blockquote&gt;
&lt;p&gt;I had this package working and waiting to be sponsored, but it looks like it currently fails
to build from source, so this just requires some maintenance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="coolprop"&gt;
&lt;h3&gt;coolprop&lt;/h3&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://www.coolprop.org/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/CoolProp/CoolProp"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
CoolProp is a thermophysical property database and wrappers for a selection
of programming environments. It offers similar functionality to REFPROP,
although CoolProp is open-source and free.&lt;/blockquote&gt;
&lt;p&gt;This package was previously building completely, but failing when one would attempt to do
an &lt;cite&gt;import coolprop&lt;/cite&gt;. Now that it's been a while since I worked with it, it
seems to be failing to build.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="elmerfem"&gt;
&lt;h3&gt;elmerfem&lt;/h3&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://www.elmerfem.org/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ElmerCSC/elmerfem"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
Elmer is a finite element software for numerical solution of partial
differential equations. Elmer is capable of handling any number of equations
and is therefore ideally suited for the simulation of multiphysical problems.
It includes models, for example, of structural mechanics, fluid dynamics, heat
transfer and electromagnetics. Users can also write their own equations that
can be dynamically linked with the main program.&lt;/blockquote&gt;
&lt;p&gt;This was previously in Debian but removed due to abandonment, so a great deal
of the work is already done, but it also requires quite a bit of updating to
current Debian standards.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if97"&gt;
&lt;h3&gt;if97&lt;/h3&gt;
&lt;div class="section" id="pdf-standard-github"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://www.iapws.org/relguide/IF97-Rev.pdf"&gt;PDF Standard&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/CoolProp/IF97"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
Open-source C++ implementation of the IAPWS-IF97 equations to calculate
properties of the pure water substance.&lt;/blockquote&gt;
&lt;p&gt;This is a dependency of CoolProp, and I already have it packaged and waiting
for sponsorship at &lt;a class="reference external" href="https://salsa.debian.org/science-team/if97"&gt;https://salsa.debian.org/science-team/if97&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ifcopenshell"&gt;
&lt;h3&gt;ifcopenshell&lt;/h3&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://www.ifcopenshell.org/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/IfcOpenShell/IfcOpenShell"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
IfcOpenShell is an open source (LGPL) software library that helps users and
software developers to work with the IFC file format. The IFC file format
can be used to describe building and construction data. The format is
commonly used for Building Information Modelling. IfcOpenShell uses
OpenCASCADE internally to convert the implicit geometry in IFC files into
explicit geometry that any software CAD or modelling package can
understand.&lt;/blockquote&gt;
&lt;p&gt;I already have this packaged and awaiting sponsorship at &lt;a class="reference external" href="https://salsa.debian.org/kkremitzki-guest/ifcopenshell"&gt;https://salsa.debian.org/kkremitzki-guest/ifcopenshell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also available on the &lt;a class="reference external" href="https://launchpad.net/~freecad-community/+archive/ubuntu/ppa"&gt;FreeCAD Community Extras PPA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ifcplusplus"&gt;
&lt;h3&gt;ifcplusplus&lt;/h3&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://ifcquery.com/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ifcquery/ifcplusplus"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
IfcPlusPlus is an open source C++ class model, as well as a reader and
writer for IFC files in STEP format. It features easy and efficient memory
management using smart pointers, a parallel reader for fast parsing on
multi-core CPU's, and a simple IFC viewer application using Qt and
OpenSceneGraph.&lt;/blockquote&gt;
&lt;p&gt;I already have this packaged and awaiting sponsorship at &lt;a class="reference external" href="https://salsa.debian.org/kkremitzki-guest/ifcplusplus"&gt;https://salsa.debian.org/kkremitzki-guest/ifcplusplus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also available on the &lt;a class="reference external" href="https://launchpad.net/~freecad-community/+archive/ubuntu/ppa"&gt;FreeCAD Community Extras PPA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="opencamlib"&gt;
&lt;h3&gt;opencamlib&lt;/h3&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://www.anderswallin.net/tag/opencamlib/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/aewallin/opencamlib"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
OpenCAMLib (OCL) is a C++ library with Python bindings for creating 3D
toolpaths for CNC-machines such as mills and lathes.&lt;/blockquote&gt;
&lt;p&gt;I already have this packaged and awaiting sponsorship at &lt;a class="reference external" href="https://salsa.debian.org/science-team/opencamlib"&gt;https://salsa.debian.org/science-team/opencamlib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also available on the &lt;a class="reference external" href="https://launchpad.net/~freecad-community/+archive/ubuntu/ppa"&gt;FreeCAD Community Extras PPA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="openvoronoi"&gt;
&lt;h3&gt;openvoronoi&lt;/h3&gt;
&lt;div class="section" id="id8"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://www.anderswallin.net/category/cnc/cam/openvoronoi/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/aewallin/openvoronoi"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
2D voronoi diagram for point and line-segment sites using incremental
topology-oriented algorithm. C++ with Python bindings.&lt;/blockquote&gt;
&lt;p&gt;I already have this packaged and awaiting sponsorship at &lt;a class="reference external" href="https://salsa.debian.org/kkremitzki-guest/openvoronoi"&gt;https://salsa.debian.org/kkremitzki-guest/openvoronoi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also available on the &lt;a class="reference external" href="https://launchpad.net/~freecad-community/+archive/ubuntu/ppa"&gt;FreeCAD Community Extras PPA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="projectchrono"&gt;
&lt;h3&gt;projectchrono&lt;/h3&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://projectchrono.org/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/projectchrono/chrono"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
C++ library for multi-physics simulation. The applications areas in which
Chrono is most often used are vehicle dynamics, robotics, and machine
design. In vehicle dynamics, Chrono has mature support for tire/terrain
interaction modeling and simulation.&lt;/blockquote&gt;
&lt;p&gt;I've only roughly begun packaging this, and I'm already tired of typing
&lt;cite&gt;libprojectchrono&lt;/cite&gt;. Anyway, it's a rather large set of components which will be
broken up into several packages. Luckily, things are done in a pretty normal
way so I don't imagine this will be difficult to finish packaging, just a
little time-costly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="smesh"&gt;
&lt;h3&gt;smesh&lt;/h3&gt;
&lt;div class="section" id="github"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://github.com/LaughlinResearch/smesh"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
A stand-alone library of the mesh framework from the Salome Platform&lt;/blockquote&gt;
&lt;p&gt;I've gotten this standalone version of SMESH packaged and awaiting sponsorship
at &lt;a class="reference external" href="https://salsa.debian.org/kkremitzki-guest/salome-smesh"&gt;https://salsa.debian.org/kkremitzki-guest/salome-smesh&lt;/a&gt;.  Eventually, I want
to package the entire Salome Platform, but it's extremely large and really
several source packages. Packaging this as an intermediate step allows us to
remove SMESH from FreeCAD's included sources.&lt;/p&gt;
&lt;p&gt;It's also available on the &lt;a class="reference external" href="https://launchpad.net/~freecad-community/+archive/ubuntu/ppa"&gt;FreeCAD Community Extras PPA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xcfem"&gt;
&lt;h3&gt;xcfem&lt;/h3&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://sites.google.com/site/xcfemanalysis/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/xcfem/xc"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
XC is an open source FEA program designed to solve structural analysis
problems.&lt;/blockquote&gt;
&lt;p&gt;This library is supposed to be an alternative to the not-quite-freely licensed
OpenSees, which is used in seismic research and analysis. There has been some
interest in the FreeCAD forums about using this, so I'm beginning packaging it
in advance. However, it seems a bit complicated as it requires multiple
sources, the GitHub &lt;cite&gt;xcfem/xc&lt;/cite&gt; repo as well as &lt;cite&gt;xcfem/xc_utils&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wishlist-packages"&gt;
&lt;h2&gt;Wishlist Packages&lt;/h2&gt;
&lt;div class="section" id="geom"&gt;
&lt;h3&gt;2geom&lt;/h3&gt;
&lt;div class="section" id="homepage-gitlab"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://lib2geom.sourceforge.net/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://gitlab.com/inkscape/lib2geom"&gt;GitLab&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
lib2geom (2Geom in private life) was initially a library developed for
Inkscape but will provide a robust computational geometry framework for any
application. It is not a rendering library, instead concentrating on high
level algorithms such as computing arc length.&lt;/blockquote&gt;
&lt;p&gt;I looked at this package and it seemed like it will be straightforward to
package, and with the parent project's popularity, someone else may get to it
first.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bimserver"&gt;
&lt;h3&gt;bimserver&lt;/h3&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;&lt;a class="reference external" href="/blog/free-software-activities-in-november-2018/bimserver.org"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/opensourceBIM/BIMserver"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
The Building Information Model server (short: BIMserver) enables you to
store and manage the information of a construction (or other building
related) project. Data is stored in the open standard IFC. The BIMserver is
not a fileserver, but it uses a model-driven architecture approach. This
means that IFC data is stored in an underlying database. The main advantage
of this approach is the ability to query, merge and filter the BIM-model
and generate IFC files on the fly.&lt;/blockquote&gt;
&lt;p&gt;The integration of BIM with FreeCAD is a very promising endeavor, and letting
FreeCAD be the client in a client-server model provides many potential
benefits. (This is the reason I'm working on PostCAD.) Packaging BIMserver
is a natural decision, then. However, it's a Java application, which I have
little experience with language-wise and none in terms of packaging it in
Debian, so this one has a bit of a difficulty associated with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cadquery"&gt;
&lt;h3&gt;cadquery&lt;/h3&gt;
&lt;div class="section" id="id14"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://dcowden.github.io/cadquery/index.html"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/dcowden/cadquery"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
CadQuery is an intuitive, easy-to-use python based language for building
parametric 3D CAD models. CadQuery is for 3D CAD what jQuery is for
javascript. Imagine selecting Faces of a 3d object the same way you select
DOM objects with JQuery!&lt;/blockquote&gt;
&lt;p&gt;CadQuery is an interesting project which actually makes use of FreeCAD, and
indeed FreeCAD even has a CadQuery Workbench. This would be nice to package as
a way of extending the FreeCAD ecosystem on Debian.&lt;/p&gt;
&lt;p&gt;Unfortunately, CadQuery 2 is planning on moving away from FreeCAD to PythonOCC,
which is based on the now behind-the-times OpenCASCADE Community Edition fork,
based on OpenCASCADE 6.9.1; FreeCAD and other projects are moving back to the
mainline OpenCASCADE Technology project which is about to release version
7.4.0. It would be nice if both CadQuery and FreeCAD could instead move to use
PyOCCT as a middle-layer between itself and OpenCASCADE.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="libreoffice-code-highlighter"&gt;
&lt;h3&gt;libreoffice-code-highlighter&lt;/h3&gt;
&lt;div class="section" id="id15"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://extensions.libreoffice.org/extensions/code-highlighter"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/slgobinath/libreoffice-code-highlighter"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
This extension highlights the code snippets for over 350 languages in
LibreOffice.&lt;/blockquote&gt;
&lt;p&gt;I have packaged a LibreOffice extension before, and it was fairly easy, so I expect this one will be too. However its priority is rather low.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lib3mf"&gt;
&lt;h3&gt;lib3mf&lt;/h3&gt;
&lt;div class="section" id="id16"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://3mf.io/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/3MFConsortium/lib3mf"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
Lib3MF is a C++ implementation of the 3D Manufacturing Format file standard.&lt;/blockquote&gt;
&lt;p&gt;This seems like a straightforward library to package, but there is no pressing need as FreeCAD does not support it yet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="muesli"&gt;
&lt;h3&gt;muesli&lt;/h3&gt;
&lt;div class="section" id="homepage-bitbucket"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://materials.imdea.org/research/simulation-tools/muesli/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://bitbucket.org/ignromero/muesli"&gt;BitBucket&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
MUESLI, a Material UnivErSal LIbrary, is a collection of C++ classes and
functions designed to model material behavior at the continuum level.
Developed at IMDEA Materials, it is available to the material science and
computational mechanics community as a suite of standard models and as a
platform for developing new ones.&lt;/blockquote&gt;
&lt;p&gt;This seems like a great candidate package for Debian Science but I have had
some difficulty building it, which I need to conquer before packaging can
begin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cling"&gt;
&lt;h3&gt;cling&lt;/h3&gt;
&lt;div class="section" id="id17"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://root.cern.ch/cling"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/root-project/cling"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
Cling is an interactive C++ interpreter, built on top of Clang and LLVM
compiler infrastructure. Cling realizes the read-eval-print loop (REPL)
concept, in order to leverage rapid application development. Implemented as
a small extension to LLVM and Clang, the interpreter reuses their strengths
such as the praised concise and expressive compiler diagnostics.&lt;/blockquote&gt;
&lt;p&gt;cling is an incredible project which should have been packaged already.
Hopefully someone else gets to it first.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dpkg-licenses"&gt;
&lt;h3&gt;dpkg-licenses&lt;/h3&gt;
&lt;div class="section" id="id18"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://github.com/daald/dpkg-licenses"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
A command line tool which lists the licenses of all installed packages in a Debian-based system (like Ubuntu)&lt;/blockquote&gt;
&lt;p&gt;This is a small script which gives a summary of the licenses used by the installed packages on your system--a good way to audit packages, e.g. forbidding AGPL.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="landlab"&gt;
&lt;h3&gt;landlab&lt;/h3&gt;
&lt;div class="section" id="id19"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://landlab.github.io/#/#install"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/landlab/landlab"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Landlab is a Python-based modeling environment that allows scientists and
students to build numerical landscape models. Designed for disciplines
that quantify earth surface dynamics such as geomorphology, hydrology,
glaciology, and stratigraphy, it can also be used in related fields.&lt;/p&gt;
&lt;p&gt;Landlab provides components to compute flows (such as water, sediment,
glacial ice, volcanic material, or landslide debris) across a gridded
terrain. With its robust, reusable components, Landlab allows scientists
to quickly build landscape model experiments and compute mass balance
across scales.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Landlab is another interesting Debian Science candidate but I have no pressing need to package it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nikola"&gt;
&lt;h3&gt;nikola&lt;/h3&gt;
&lt;div class="section" id="id20"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://getnikola.com/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/getnikola/nikola"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
A static website and blog generator, written in Python.&lt;/blockquote&gt;
&lt;p&gt;Nikola is what I use to create this blog, but it's somewhat fast moving and a
slow maintainer in Debian previously caused problems, so I don't want to pick
this up until I've leveled up my package maintenance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="osifont"&gt;
&lt;h3&gt;osifont&lt;/h3&gt;
&lt;div class="section" id="id21"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://fontlibrary.org/en/font/osifont"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/hikikomori82/osifont"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
In some European countries, CAD projects must have font which conform to
IS0 3O98 specification. Commercial CADs has this font, but free CADs not.
There is no available free font yet, so this project will fix this. This
font will be created completely from the scratch. Font is created with free
tools like FontForge, Inkscape, Gimp. Font is available under 3 licences:
GNU GPL licence version 3 with GPL font exception, GNU GPL licence version
2 with GPL font exception, GNU LGPL licence version 3 with GPL font
exception.&lt;/blockquote&gt;
&lt;p&gt;This is a bundled font with FreeCAD, so I'd like to separate into its own
package. However, the need to package it is not pressing, so I haven't picked
it up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pigpio"&gt;
&lt;h3&gt;pigpio&lt;/h3&gt;
&lt;div class="section" id="id22"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://abyz.me.uk/rpi/pigpio/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/joan2937/pigpio"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
pigpio is a C library for the Raspberry which allows control of the General
Purpose Input Outputs (GPIO).&lt;/blockquote&gt;
&lt;p&gt;This is an important tool for teaching with Raspberry Pi's and should be
packaged as soon as possible, I've just had more pressing concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="piscope"&gt;
&lt;h3&gt;piscope&lt;/h3&gt;
&lt;div class="section" id="id23"&gt;
&lt;h4&gt;&lt;a class="reference external" href="http://abyz.me.uk/rpi/pigpio/piscope.html"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/joan2937/piscope"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
A logic analyser (digital waveform viewer).  piscope uses the services of
the pigpio library. pigpio needs to be running on the Pi whose gpios are to
be monitored.&lt;/blockquote&gt;
&lt;p&gt;Being able to see the waveform of a GPIO pin on a Raspberry Pi is incredibly
useful for teaching robotics and electrical engineering classes with them. This
also needs to be packaged.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pyocct"&gt;
&lt;h3&gt;pyocct&lt;/h3&gt;
&lt;div class="section" id="id24"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://github.com/LaughlinResearch/pyOCCT"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
The pyOCCT project provides Python bindings to the OpenCASCADE 7.2.0
geometry kernel and SMESH 8.3.0 meshing library via pybind11. Together,
this technology stack enables rapid CAD/CAE application development in the
popular Python programming language.&lt;/blockquote&gt;
&lt;p&gt;This is a very promising library for Python OpenCASCADE development, so I'd
like to get it packaged, but it's blocked by getting SMESH packaged.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pyray"&gt;
&lt;h3&gt;pyray&lt;/h3&gt;
&lt;div class="section" id="id25"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://github.com/ryu577/pyray"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
A 3D rendering library written completely in Python.&lt;/blockquote&gt;
&lt;p&gt;A promising library for integrating raytracing functionality directly into
FreeCAD, and for general raytracing in Python.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="quarter"&gt;
&lt;h3&gt;quarter&lt;/h3&gt;
&lt;div class="section" id="bitbucket"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://bitbucket.org/Coin3D/quarter"&gt;BitBucket&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
Quarter is a light-weight glue library that provides seamless integration
between the Coin high-level 3D visualization library and Qt's 2D user
interface library.  The functionality in Quarter revolves around
QuarterWidget, a subclass of QGLWidget. This widget provides functionality
for rendering of Coin scenegraphs and translation of QEvents into SoEvents.
Using this widget is as easy as using any other QWidget.&lt;/blockquote&gt;
&lt;p&gt;FreeCAD already uses an included (and slightly modified) copy of Quarter in its
source, so I'd like to package Quarter in a standalone fashion as part of
moving FreeCAD away from bundled copies in its source.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rebound"&gt;
&lt;h3&gt;rebound&lt;/h3&gt;
&lt;div class="section" id="id26"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://rebound.readthedocs.io/en/latest/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/hannorein/rebound"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
REBOUND is an N-body integrator, i.e. a software package that can integrate
the motion of particles under the influence of gravity. The particles can
represent stars, planets, moons, ring or dust particles. REBOUND is very
flexible and can be customized to accurately and efficiently solve many
problems in astrophysics.&lt;/blockquote&gt;
&lt;p&gt;This seems like a really great library to have in Debian Science, but it's not a priority.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sqlint"&gt;
&lt;h3&gt;sqlint&lt;/h3&gt;
&lt;div class="section" id="id27"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://github.com/purcell/sqlint"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLint is a simple command-line linter which reads your SQL files and
reports any syntax errors or warnings it finds.&lt;/p&gt;
&lt;p&gt;At this stage, SQLint checks SQL against the ANSI syntax, and uses the
PostgreSQL SQL parser to achieve this. In time, we hope to add support for
non-standard SQL variants (e.g. MySQL). Contributions are welcome.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This would be a very useful utility to have in Debian, but I always write SQL without flaw the first try. (wink)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="swatmodel"&gt;
&lt;h3&gt;swatmodel&lt;/h3&gt;
&lt;div class="section" id="id28"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://swat.tamu.edu/"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/WatershedModels/SWAT"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
The Soil &amp;amp; Water Assessment Tool is a small watershed to river basin-scale
model used to simulate the quality and quantity of surface and ground water
and predict the environmental impact of land use, land management
practices, and climate change. SWAT is widely used in assessing soil
erosion prevention and control, non-point source pollution control and
regional management in watersheds.&lt;/blockquote&gt;
&lt;p&gt;SWAT is a powerful research tool in agricultural engineering, among several
others I'm interested in eventually packaging for Debian. The planned package
will be based on a CMake-enabled fork of the upstream source, which is built
with Intel's Fortran compiler by default and also had to be adapted for
gfortran.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wger"&gt;
&lt;h3&gt;wger&lt;/h3&gt;
&lt;div class="section" id="id29"&gt;
&lt;h4&gt;&lt;a class="reference external" href="https://wger.de/en/software/features"&gt;Homepage&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/wger-project/wger"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
Self hosted FLOSS fitness/workout and weight tracker written with Django&lt;/blockquote&gt;
&lt;p&gt;This is a very promising application which could be used as both a fitness
tracker as well as a weight/nutrition tracker, something along the lines of a
self-hosted MyFitnessPal. However, my other packaging priorities outweigh this
at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, there you have it! My mostly complete list of in-progress and wishlist
items for Debian packaging. If you have any feedback on packages on the list,
or want to get in touch with me, you can find me &lt;a class="reference external" href="https://twitter.com/thekurtwk"&gt;on Twitter&lt;/a&gt; or send me an email at kurt at kwk.systems.
I'll also be starting to stream my Debian &amp;amp; FreeCAD work very soon, &lt;a class="reference external" href="https://twitch.tv/kkremitzki"&gt;subscribe
to me on Twitch&lt;/a&gt; to get notified when I go
live.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>debian</category><category>freecad</category><category>postcad</category><guid>/blog/free-software-activities-in-november-2018/</guid><pubDate>Wed, 19 Dec 2018 05:20:10 GMT</pubDate></item><item><title>GSoC Week 5 recap</title><link>/blog/gsoc-week-5-recap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;This week started out with some interesting discussions on the future Python structure of FreeCAD, over
&lt;a class="reference external" href="https://forum.freecadweb.org/viewtopic.php?f=10&amp;amp;t=23197"&gt;on the forums&lt;/a&gt;. This was especially salient
as I have a bit of pain interacting with parts of the FreeCAD Python API and improvements to it would
be a good long-term goal after finishing GSoC.&lt;/p&gt;
&lt;p&gt;I decided that the &lt;tt class="docutils literal"&gt;TestPartDesignApp.py&lt;/tt&gt; file I had been working in thus far needed splitting up,
as I was cramming almost every new test into it.
The &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD/blob/master/src/Mod/PartDesign/TestPartDesignApp.py"&gt;new version of this file&lt;/a&gt;
is a pretty nice indicator of the overall status of PartDesign test coverage.&lt;/p&gt;
&lt;p&gt;I also added some basic tests for datum tools, covering simple creation scenarios. While exploring the 4th datum
tool, &lt;tt class="docutils literal"&gt;ShapeBinder&lt;/tt&gt;, I found a bug that causes a crash, so I will need to look into that shortly to see if it's an
easy fix.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;LinearPattern&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PolarPattern&lt;/tt&gt; got 6 new tests each, covering all the major variations of sketch-
or primitive-based features.&lt;/p&gt;
&lt;p&gt;Finally, I added one new test for each of the dressup features, &lt;tt class="docutils literal"&gt;Fillet&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Chamfer&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Draft&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Thickness&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Here's the pull request summarizing my work: &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD/pull/869"&gt;https://github.com/FreeCAD/FreeCAD/pull/869&lt;/a&gt;&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"&gt;
&lt;col width="28%"&gt;
&lt;col width="11%"&gt;
&lt;col width="28%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;tool category&lt;/th&gt;
&lt;th class="head"&gt;initial, current test count&lt;/th&gt;
&lt;th class="head"&gt;status&lt;/th&gt;
&lt;th class="head"&gt;notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;datum tools&lt;/td&gt;
&lt;td&gt;0, 3&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt;found shapebinder crash bug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;add. &amp;amp; sub. features/primitives&lt;/td&gt;
&lt;td&gt;15, 15&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;transformations&lt;/td&gt;
&lt;td&gt;3, 15&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt;all done but MultiTransform&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dressup features&lt;/td&gt;
&lt;td&gt;0, 4&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;boolean operation&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>freecad</category><category>gsoc</category><guid>/blog/gsoc-week-5-recap/</guid><pubDate>Tue, 11 Jul 2017 19:45:35 GMT</pubDate></item><item><title>GSoC Week 4 recap</title><link>/blog/gsoc-week-4-recap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;I started this week out with the goal of troubleshooting the bugs I found with PartDesign Pipe and Revolve.
However, I ended up running into several annoying issues. The LLDB debugging integration I previously wrote about
began showing some inexplicable errors:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
error caught in async handler 'exec ('continue',)'
Traceback (most recent call last):
  File "/home/kurt/.config/nvim/bundles/repos/github.com/dbgx/lldb.nvim/rplugin/python/lldb_nvim/__init_
_.py", line 49, in _exec
    self.ctrl.safe_execute(args)
  File "/home/kurt/.config/nvim/bundles/repos/github.com/dbgx/lldb.nvim/rplugin/python/lldb_nvim/control
ler.py", line 101, in safe_execute
    self.safe_call(self.exec_command, [cmd])
  File "/home/kurt/.config/nvim/bundles/repos/github.com/dbgx/lldb.nvim/rplugin/python/lldb_nvim/control
ler.py", line 94, in safe_call
    raise EventLoopError("Dead event loop!")
EventLoopError: Dead event loop!
&lt;/pre&gt;
&lt;p&gt;Eventually I found &lt;a class="reference external" href="https://github.com/dbgx/lldb.nvim/issues/52"&gt;an issue on Github&lt;/a&gt; which refers to
a now-deleted comment in the author's original repository, stating the project was no longer being developed.
The question remains as to how it was working just fine when I began and only just now stopped working, but
the end result was that my debugger-editor integration was broken, which makes it quite a bit tougher to debug
the C++ side of the codebase.&lt;/p&gt;
&lt;p&gt;One option I had was to just use GDB as a standalone command line application, but it's really convenient, e.g.
to not have to manually type out file names and line numbers for breakpoints, and otherwise have your debugger
wired up to your editor.&lt;/p&gt;
&lt;p&gt;However, this was inexplicably not working either! Basic features of GDB worked, but trying to specify breakpoints
to step through the code was not. I banged my head on this issue for a while until I figured up &lt;tt class="docutils literal"&gt;ccmake&lt;/tt&gt; to
take a look at my build options. The issue? Somehow, the &lt;tt class="docutils literal"&gt;CMAKE_BUILD_TYPE&lt;/tt&gt;, which had been set to &lt;tt class="docutils literal"&gt;Debug&lt;/tt&gt;,
was unset. So, I set it again and started the debug build, which takes quite a long time.
(Around 2 hours with &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;-j4&lt;/span&gt;&lt;/tt&gt;.)&lt;/p&gt;
&lt;p&gt;I also did more research on options for debugger integration. I found an interesting option called Pyclewn
which is a debugger front-end for (neo)vim. This option was attractive since I could have a unified front-end
to both my C++ debugger as well as a Python one. However, setup wasn't straightforward, so I continued searching
for a simpler option.&lt;/p&gt;
&lt;p&gt;Luckily, I stumbled upon &lt;a class="reference external" href="https://github.com/neovim/neovim/blob/master/contrib/gdb/neovim_gdb.vim"&gt;neovim_gdb.vim&lt;/a&gt;,
a simple combination of vim settings, available in the &lt;tt class="docutils literal"&gt;contrib&lt;/tt&gt; folder of the neovim repository.&lt;/p&gt;
&lt;p&gt;Once that was taken care of, I started working on my original objective for the week. I found that the
PartDesign Pipe issue was being caused by the code checking for whether or not the Pipe's AuxillerySpine (sic)
was a part of the active body, but didn't check if the thing existed first. This resulted in a check to
see if a null pointer was part of the active body, which is never the case. Checking for existence first
&lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD/pull/848"&gt;resolved the issue&lt;/a&gt;. With that bug fixed, I also added
two tests each for PartDesign Pipe and Loft.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"&gt;
&lt;col width="28%"&gt;
&lt;col width="11%"&gt;
&lt;col width="28%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;tool category&lt;/th&gt;
&lt;th class="head"&gt;initial, current test count&lt;/th&gt;
&lt;th class="head"&gt;status&lt;/th&gt;
&lt;th class="head"&gt;notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;datum tools&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;add. &amp;amp; sub. features/primitives&lt;/td&gt;
&lt;td&gt;11, 15&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt;all additive &amp;amp; subtractive
features now have at least
one test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;transformations&lt;/td&gt;
&lt;td&gt;3, 3&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dressup features&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;boolean operation&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>freecad</category><category>gsoc</category><guid>/blog/gsoc-week-4-recap/</guid><pubDate>Fri, 30 Jun 2017 10:48:06 GMT</pubDate></item><item><title>GSoC Week 3 recap</title><link>/blog/gsoc-week-3-recap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;Howdy! I wasn't sure of the best way to represent my progress thus far, but I figure a table is an alright way to summarize.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"&gt;
&lt;col width="28%"&gt;
&lt;col width="11%"&gt;
&lt;col width="28%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;tool category&lt;/th&gt;
&lt;th class="head"&gt;initial, current test count&lt;/th&gt;
&lt;th class="head"&gt;status&lt;/th&gt;
&lt;th class="head"&gt;notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;datum tools&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;hold&lt;/td&gt;
&lt;td&gt;waiting on attachment
editor work in phase 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;add. &amp;amp; sub. features/primitives&lt;/td&gt;
&lt;td&gt;3, 11&lt;/td&gt;
&lt;td&gt;blocked&lt;/td&gt;
&lt;td&gt;basic Pipe not working; when
fixed, all tools in this
category (but not all their
options) will have test
coverage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;transformations&lt;/td&gt;
&lt;td&gt;0, 3&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt;Mirrored added, still need
Linear and PolarPattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dressup features&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;boolean operation&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt;Previously seemed to
misbehave but recent changes
to containers may have fixed
this&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I got my Pad &amp;amp; Pocket tests added, so right now the total Δtests is 11. Next up is Loft and Pipe. However,
Pipe has a bit of a blocking bug right now. My test scenario involves a simple circle centered at the origin
in an XY-attached sketch, serving as the base Profile, and a simple line on the Z axis in an XZ-attached sketch.
The test construction is illustrated in figure 1.&lt;/p&gt;
&lt;p&gt;This should result in a cylinder, as the preview indicates in figure 2. For some reason, when clicking OK,
an external reference warning is being generated, and this is blocking any test constructions for PartDesign Pipe.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="test pipe construction" src="/images/gsoc-3-3.png" style="width: 300px;"&gt;
&lt;p class="caption"&gt;Figure 1. PartDesign Pipe Profile and Spine sketches which should form a simple cylinder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="external reference warning" src="/images/gsoc-3-4.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 2. PartDesign Pipe erroneously warning about external references.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I also ran into a bug in PartDesign Revolve, which, as bugs are wont to do, ended up being two bugs.
The construction case to see them is depicted in figure 3.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="revolution sketches" src="/images/gsoc-3-1.png" style="width: 300px;"&gt;
&lt;p class="caption"&gt;Figure 3. Simple sketches attached to the three base planes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I attached a simple circle sketch to each of the three base planes, and offset them so they wouldn't be symmetric
with respect to the origin or any base axes. When attempting to add a Revolution with these sketches, they behave
as expected, until one attempts to revolve them about the axis which is normal to the sketch's plane. For the
XY- and YZ-attached sketches, the following error appears:&lt;/p&gt;
&lt;blockquote&gt;
Unhandled Base::Exception caught in GUIApplication::notify.
The error message is: Rotation axis must not be perpendicular with the sketch plane&lt;/blockquote&gt;
&lt;p&gt;However, if one tries to revolve the XZ-attached circle, FreeCAD gives it the ol' college try, but
ends up with an awfully thin "solid":&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="faulty revolution" src="/images/gsoc-3-2.png" style="width: 300px;"&gt;
&lt;p class="caption"&gt;Figure 4. An "error-free" PartDesign Revolution.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I'll also be looking into these bugs this week.&lt;/p&gt;&lt;/div&gt;</description><category>freecad</category><category>gsoc</category><guid>/blog/gsoc-week-3-recap/</guid><pubDate>Thu, 22 Jun 2017 16:15:49 GMT</pubDate></item><item><title>GSoC Week 2 recap</title><link>/blog/gsoc-week-2-recap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;With the four major bugs blocking the usage of &lt;tt class="docutils literal"&gt;PartDesign Mirrored&lt;/tt&gt; fixed,
I started out the week exploring the now-functioning tool with the goal of getting what I call "command test coverage".
In short, this means testing major variations for tools presented to the user in the PartDesign WB.&lt;/p&gt;
&lt;p&gt;For reference, they are depicted and categorized in figures 1 and 2,
with the newly redesigned icons made by &lt;a class="reference external" href="https://github.com/agryson"&gt;Alexander Gryson&lt;/a&gt; (kudos to his major rework of all of FreeCAD's icons!)&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="command palette" src="/images/gsoc-2-1.png" style="width: 900px;"&gt;
&lt;p class="caption"&gt;Figure 1. Datum tools, additive/subtractive features and primitives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="command palette" src="/images/gsoc-2-2.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 2. Transformations, dressup features, and multi-body boolean operation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Mirrored tool takes as input feature(s) and a mirror plane, but the other transformation tools like LinearPattern and PolarPattern behave in a fundamentally similar way.
By that reasoning, I figured that tests regarding the Mirrored tool really only have two major permutations if one assumes valid input:
the case where a choice of features and plane succeeds, and one where it doesn't.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirrored success" src="/images/gsoc-2-3.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 3. Success!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirrored failure" src="/images/gsoc-2-4.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 4. Failure...&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So, I cleaned up the test case submission I started GSoC out with, &lt;tt class="docutils literal"&gt;testMirroredSketchCase&lt;/tt&gt;,
and added the new case depicted in figure 4, &lt;tt class="docutils literal"&gt;testMirroredOffsetFailureCase&lt;/tt&gt;.
However, I noticed both of my test cases involved &lt;tt class="docutils literal"&gt;Sketch&lt;/tt&gt;-based additive features, but no additive primitives.
So, I also included &lt;tt class="docutils literal"&gt;testMirroredPrimitiveCase&lt;/tt&gt; in &lt;a class="reference external" href="https://github.com/FreeCAD/FreeCAD/pull/816"&gt;FreeCAD PR#816&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's nice is that besides &lt;tt class="docutils literal"&gt;PartDesign Mirrored&lt;/tt&gt; now being fixed, several other transformation tools' bugs were resolved.
Altogether, the PR resolved four issues, &lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=2235"&gt;2235&lt;/a&gt;,
&lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=2248"&gt;2248&lt;/a&gt;, &lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=3006"&gt;3006&lt;/a&gt;,
and &lt;a class="reference external" href="https://www.freecadweb.org/tracker/view.php?id=3065"&gt;3065&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With all that wrapped up,
I moved on to adding tests for the various options for the fundamental sketch-based features &lt;tt class="docutils literal"&gt;Pad&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Pocket&lt;/tt&gt;.
Altogether, I added &lt;tt class="docutils literal"&gt;testPadToFirstCase&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testPadtoLastCase&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testPadToFaceCase&lt;/tt&gt;,
and &lt;tt class="docutils literal"&gt;testPadTwoDimensionsCase&lt;/tt&gt; to cover the options for &lt;tt class="docutils literal"&gt;PartDesign Pad&lt;/tt&gt;.
Unfortunately, these test cases are not very interesting to look at and mostly involve 2-4 lined up cubes similar to
what figure 3 looks like.&lt;/p&gt;
&lt;p&gt;However, for &lt;tt class="docutils literal"&gt;PartDesign Pad&lt;/tt&gt;, things do get a little more interesting.
The base case is a simple reversed pad with a pocket in the middle, shown in figure 5.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirrored failure" src="/images/gsoc-2-5.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 5. The base Pocket test construction.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It was straightforward to add &lt;tt class="docutils literal"&gt;testPocketDimensionCase&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testPocketThroughAllCase&lt;/tt&gt;,
and &lt;tt class="docutils literal"&gt;testPocketToFirstCase&lt;/tt&gt;.
However, covering the last Pocket option with &lt;tt class="docutils literal"&gt;testPocketToFaceCase&lt;/tt&gt; is not (necessarily) so trivial.&lt;/p&gt;
&lt;p&gt;If you refer to figure 5, you'll note that the base Pad feature is a hexahedron, or six-sided shape.
The Pocket feature adds four new faces to the overall shape, &lt;tt class="docutils literal"&gt;Face7&lt;/tt&gt; through &lt;tt class="docutils literal"&gt;Face10&lt;/tt&gt;.
However, references relying on the numbering of those faces is inherently brittle and it turns out that
a particular face number OpenCASCADE &amp;gt; 7.0 does not correspond to the same face in a lower version, e.g.
the version used on the FreeCAD CI machines over at Travis.&lt;/p&gt;&lt;/div&gt;</description><category>freecad</category><category>gsoc</category><guid>/blog/gsoc-week-2-recap/</guid><pubDate>Sun, 18 Jun 2017 23:40:33 GMT</pubDate></item><item><title>GSoC Week 1 Recap</title><link>/blog/gsoc-week-1-recap/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;The first week of Google Summer of Code has ended, and so it's time for a recap post!&lt;/p&gt;
&lt;p&gt;The main topic this week was &lt;a class="reference external" href="https://www.freecadweb.org/wiki/PartDesign_Mirrored"&gt;PartDesign Mirrored&lt;/a&gt;, a fairly self-explanatory feature,
with a show-stopping bug explained in &lt;a class="reference external" href="https://freecadweb.org/tracker/view.php?id=3006"&gt;FreeCAD issue 3006&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="unit cube construction" src="/images/gsoc-1-1.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 1. The base of my PartDesign Mirrored experiments.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this picture, we have a simple &lt;tt class="docutils literal"&gt;1 mm&lt;/tt&gt; square sketch (pictured in white) attached to the &lt;span class="math"&gt;\(xy\)&lt;/span&gt;-plane.
One corner is at the origin, and the sketch is the base for a Pad feature &lt;tt class="docutils literal"&gt;1 mm&lt;/tt&gt; high.
Length is handled internally as &lt;tt class="docutils literal"&gt;mm&lt;/tt&gt; by FreeCAD, so this "unit cube" serves as a useful basis for testing behavior.
A useful alteration involves displacing this cube, say, &lt;tt class="docutils literal"&gt;1 mm&lt;/tt&gt; up the &lt;span class="math"&gt;\(y\)&lt;/span&gt;-axis.
This constructs a case where mirroring not all mirrorings should succeed, but we'll get into that later.&lt;/p&gt;
&lt;p&gt;Let's turn now to the bug itself, depicted in figure 2.
The unit cube is supposed to be mirrored about its vertical sketch axis (the &lt;span class="math"&gt;\(y\)&lt;/span&gt;-axis, pictured running off to the top right.)
Obviously, it's not, and the failure is helpfully represented in red.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mirroring bug" src="/images/gsoc-1-2.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 2. FreeCAD bug 3006 in action.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note that the body diagonal of the mirrored part should run from the origin to  &lt;span class="math"&gt;\((-1, 1, 1)\)&lt;/span&gt;.
Instead, it's going to &lt;span class="math"&gt;\((1, -1, -1)\)&lt;/span&gt;, in the opposite direction.&lt;/p&gt;
&lt;p&gt;Well, this was my first really serious bug to tackle for the summer.
I chose this as a way to really dive in, since it directly involves Open CASCADE, the open source C++ geometry kernel at the heart of FreeCAD.&lt;/p&gt;
&lt;p&gt;However, my programming background is chiefly with Python (as well as JavaScript and Lua), all interpreted languages.
One nicety of that sort of language is that it can be very quick to debug and examine behavior using the interpreter.
There is a Python debugger, &lt;tt class="docutils literal"&gt;pdb&lt;/tt&gt;, but I rarely needed to use it for my mostly personal-sized projects.
Even then, it's quite straightforward to use since you're already in an interpreter-native environment.&lt;/p&gt;
&lt;p&gt;C++ is a very different beast. In this case, stepping through the code with a debugger was my only choice.
I use Neovim as my IDE, though, so I wanted a way to combine the power of my text editor with my debugger.
So, I found and set up &lt;a class="reference external" href="https://github.com/dbgx/lldb.nvim"&gt;LLDB.nvim&lt;/a&gt;, an LLDB frontend, with an event-based, non-blocking UI,
session-saving, and
"... takes advantage of Neovim's job API to spawn a separate process and communicates with the Neovim process using RPC calls."&lt;/p&gt;
&lt;p&gt;Pretty nice. Anyway, I was able to step through the code and see exactly what was flying around, just like I wanted.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="neovim" src="/images/neovim1.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 3. Neovim in an LLDB debug session.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So, what was the problem? Hah! Not so simple. Turns out there are &lt;em&gt;at least four bugs here!!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, the algorithm which first checks if the mirrored shapes are adjacent and thus, can be fused, was broken.&lt;/p&gt;
&lt;p&gt;Once this failed, FreeCAD then attempts to generate a mesh from the shape, and then converts a generalized transformation object representing the mirroring into a matrix to put the mesh in the correct place.
It turns out that in Open CASCADE 7.0.0, the &lt;tt class="docutils literal"&gt;gp_Trsf&lt;/tt&gt; API was changed so that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gp_Trsf::VectorialPart()&lt;/span&gt;&lt;/tt&gt; returns a 3x3 matrix including the scale factor.
The previous behavior was to return the homogeneous part of the transformation which does not include the scale factor, and the FreeCAD algorithm for constructing the 4x4 matrix for the mesh included multiplying every term by a scale factor.
In other words, the scale factor multiplication was happening twice. The scale factor I had observed in the debugger was -1, so this perfectly explained the inverted positioning of the failure result!&lt;/p&gt;
&lt;p&gt;The third bug, of a much more minor nature, involved a a classic "failure... success!" message displayed in the event of a mirroring failure, and was easier to fix.&lt;/p&gt;
&lt;p&gt;The fourth, though, was a bit trickier! It only appeared when fixing the mesh placement.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="new mirroring bug" src="/images/gsoc-1-3.png" style="width: 600px;"&gt;
&lt;p class="caption"&gt;Figure 4. A strange, new mirroring bug.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This one was diagnosed by ickby, my mentor for this project.
It turns out the failure meshes' faces were getting constructed inside out, and so the material's color was not considered "illuminated".&lt;/p&gt;
&lt;p&gt;The three of us considered a few different options to get around this. One way would be to use Coin3D, FreeCAD's scene graph library, and change the material
properties to define something that looked the same, illuminated or not. Another is to essentially duplicate each face with the second instance having an inverted normal, so that you're guaranteed to have an outward-facing face.&lt;/p&gt;
&lt;p&gt;The fix ended up being much simpler than that! It was possible to simply change the vertex ordering. Originally, it was set to &lt;tt class="docutils literal"&gt;COUNTERCLOCKWISE&lt;/tt&gt;.
However, in figure 4, you can see that simply changing it to &lt;tt class="docutils literal"&gt;CLOCKWISE&lt;/tt&gt; would not be an obvious fix.
Abdullah also fixed this one, presumably by checking the docs for that option and finding that there was an "option C", &lt;tt class="docutils literal"&gt;UNKNOWN&lt;/tt&gt;. That did the trick!&lt;/p&gt;
&lt;p&gt;So now, PartDesign Mirrored is fixed and ready. Not a bad start for the summer!&lt;/p&gt;
&lt;!-- Open CASCADE and quaternions --&gt;
&lt;!-- Transformation matrices --&gt;
&lt;!-- OpenInventor and tessellation --&gt;
&lt;!-- Plans for the future --&gt;
&lt;!-- Rebuild test --&gt;&lt;/div&gt;</description><category>freecad</category><category>gsoc</category><guid>/blog/gsoc-week-1-recap/</guid><pubDate>Tue, 06 Jun 2017 19:28:12 GMT</pubDate></item><item><title>My FreeCAD project was accepted into Google Summer of Code!</title><link>/blog/my-freecad-project-was-accepted-into-google-summer-of-code/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;It's been almost a year since my last post, which just so happened to be about FreeCAD
as well. It's been a busy year: I've been studying machine design, robotics; partial differential
equations in general, and heat and mass transfer in particular. I've also been studying the source
code of FreeCAD while honing my sysadmin skills by helping maintain project infrastructure.
My hard work has paid off, and &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#5752969237626880"&gt;my Google Summer of Code project proposal &lt;/a&gt;
was accepted! I'm going to be working on improving the parametric part design workbench and writing
test code to make the module more robust for future development.&lt;/p&gt;
&lt;p&gt;As a result, I've decided to publish my daily log here. I'll be posting weekly summaries once the
coding period begins on May 30, as well as more in-depth ad hoc blogging on interesting developments over the summer.
My goal is to both document my project and to produce a useful reference for other developers wanting to get started
contributing to FreeCAD.&lt;/p&gt;
&lt;p&gt;The rest of May is part of the Community Bonding Period, and so I'll ramp up to full speed with an introductory series
of posts. Here are a few rough-draft titles to highlight my planned topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/distcc/distcc"&gt;Neovim&lt;/a&gt; as an IDE:&lt;ol class="arabic"&gt;
&lt;li&gt;Building your base, or practically pluginless&lt;/li&gt;
&lt;li&gt;What makes an IDE? An overview of features&lt;/li&gt;
&lt;li&gt;Unix as an IDE, or knowing your tools&lt;/li&gt;
&lt;li&gt;Neovim with Python 2 and 3&lt;/li&gt;
&lt;li&gt;Neovim with C++&lt;/li&gt;
&lt;li&gt;Asynchronous autobuilding with Neovim&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Distributed compilation with &lt;a class="reference external" href="https://github.com/distcc/distcc"&gt;distcc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Speaking source code: how to fix your first FreeCAD bug&lt;/li&gt;
&lt;li&gt;Contributing to open source communities (and FreeCAD in particular)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>freecad</category><guid>/blog/my-freecad-project-was-accepted-into-google-summer-of-code/</guid><pubDate>Sat, 06 May 2017 07:41:23 GMT</pubDate></item><item><title>Getting Started with FreeCAD Development in Ubuntu 16.04</title><link>/blog/getting-started-with-freecad-development-in-ubuntu-1604/</link><dc:creator>Kurt Kremitzki</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.freecadweb.org/"&gt;FreeCAD&lt;/a&gt; is a multi-platform (Windows, Mac, Linux) open source parametric 3D CAD modeler, and can read
and write many open file formats.&lt;/p&gt;
&lt;p&gt;An explanation of the many virtues of open source software can be found at &lt;a class="reference external" href="http://opensourceforamerica.org/learn-more/benefits-of-open-source-software/"&gt;Open Source for America&lt;/a&gt; and elsewhere. To quote OSFA,&lt;/p&gt;
&lt;blockquote&gt;
The Open Source model harnesses the power of distributed peer review and transparency to create high-quality, secure
and easily integrated software at an accelerated pace and lower cost.&lt;/blockquote&gt;
&lt;p&gt;Commerical-grade CAD software, while incredibly useful, has several downsides including being locked behind 4 or 5 digit licensing costs,
and its use in amateur projects or the developing world is often facilitated by piracy. FreeCAD, on the other hand, is free as in beer
and free as in freedom, although it is currently under development. However, one of the benefits of the open source model is the ease
with which interested people can contribute to the project and make better tools for all mankind.&lt;/p&gt;
&lt;p&gt;While using FreeCAD, I noticed a few typos in the menus; although my first contribution to the project wasn't too significant, I
documented the process of getting a development environment set up on my Ubuntu 16.04 desktop so that others could follow the same
steps and begin contributing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pull down a copy of the code. (If you don't have a copy of git, run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install git&lt;/tt&gt;.)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_978a630f56ac4c21bf635b604480df8b-1"&gt;&lt;/a&gt;git clone https://github.com/FreeCAD/FreeCAD.git freecad-code
&lt;a name="rest_code_978a630f56ac4c21bf635b604480df8b-2"&gt;&lt;/a&gt;mkdir freecad-build
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Install all dependencies.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-1"&gt;&lt;/a&gt;sudo apt-get install build-essential cmake python python-matplotlib libtool libcoin80-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-2"&gt;&lt;/a&gt;  libsoqt4-dev libxerces-c-dev libboost-dev libboost-filesystem-dev libboost-regex-dev  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-3"&gt;&lt;/a&gt;  libboost-program-options-dev libboost-signals-dev libboost-thread-dev libboost-python-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-4"&gt;&lt;/a&gt;  libqt4-dev libqt4-opengl-dev qt4-dev-tools python-dev python-pyside pyside-tools &lt;span class="s1"&gt;'liboce*-dev'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-5"&gt;&lt;/a&gt;  oce-draw libeigen3-dev libqtwebkit-dev libshiboken-dev libpyside-dev libode-dev swig libzipios++-dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-6"&gt;&lt;/a&gt;  libfreetype6 libfreetype6-dev
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Install optional packages&lt;/span&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-9"&gt;&lt;/a&gt;sudo apt-get install libsimage-dev checkinstall python-pivy python-qt4 doxygen &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_207627ce3aa147b7aecfb93435efa176-10"&gt;&lt;/a&gt;  libcoin80-doc libspnav-dev
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Move into build folder, make and compile the software. Use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-j&lt;/span&gt; $(nproc)&lt;/tt&gt; flag to use all N of your CPU cores
when compiling; some recommend using N + 1 CPU cores, which can be done by instead running &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;-j$((&lt;/span&gt; $(nproc) + 1 )) .&lt;/tt&gt;.
Don't forget the period at the end of the &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; command, which tells it to put the compiled software in the current
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;freecad-build&lt;/span&gt;&lt;/tt&gt; directory; it's good to keep the source code and build directories separate.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ed8c9a4478b54d81bebff5a320a2de19-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; freecad-build
&lt;a name="rest_code_ed8c9a4478b54d81bebff5a320a2de19-2"&gt;&lt;/a&gt;cmake ../freecad-code
&lt;a name="rest_code_ed8c9a4478b54d81bebff5a320a2de19-3"&gt;&lt;/a&gt;make -j&lt;span class="k"&gt;$(&lt;/span&gt;nproc&lt;span class="k"&gt;)&lt;/span&gt; .
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Fix Ubuntu 64-bit issue. If you are using a 64-bit version of Ubuntu (hopefully), you may run in to the following
error message, which occurs because the expected &lt;tt class="docutils literal"&gt;libfreeimage.so&lt;/tt&gt; file was moved into a subdirectory of &lt;tt class="docutils literal"&gt;/usr/lib/&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_edceb17c60e4494bac8cbaa04c5fedd1-1"&gt;&lt;/a&gt;make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** No rule to make target &lt;span class="s1"&gt;'/usr/lib/libfreeimage.so'&lt;/span&gt;, needed by &lt;span class="s1"&gt;'lib/libSMDS.so'&lt;/span&gt;.  Stop.
&lt;a name="rest_code_edceb17c60e4494bac8cbaa04c5fedd1-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_edceb17c60e4494bac8cbaa04c5fedd1-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Fix with this line.&lt;/span&gt;
&lt;a name="rest_code_edceb17c60e4494bac8cbaa04c5fedd1-4"&gt;&lt;/a&gt;sudo ln -s /usr/lib/x86_64-linux-gnu/libfreeimage.so /usr/lib
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Once the build is complete, a runnable copy of the FreeCAD executable will be in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;freecad-build&lt;/span&gt;&lt;/tt&gt; folder. Any changes
made to the source code can be tested after re-compiling the executable.&lt;/p&gt;
&lt;p&gt;Hopefully this post helps someone out there! Even if you are only contributing to the documentation as you learn FreeCAD,
your contribution is valuable and can help tons of people across the globe.&lt;/p&gt;&lt;/div&gt;</description><category>foss</category><category>freecad</category><category>linux</category><guid>/blog/getting-started-with-freecad-development-in-ubuntu-1604/</guid><pubDate>Sun, 05 Jun 2016 11:17:51 GMT</pubDate></item></channel></rss>